{"version":3,"file":"index.js","sources":["../src/util/location.ts","../src/parse-error/credentials.ts","../src/parse-error/module-errors.ts","../src/parse-error/to-node-description.ts","../src/parse-error/standard-errors.ts","../src/parse-error/strict-mode-errors.ts","../src/parse-error/pipeline-operator-errors.ts","../src/parse-error.ts","../src/plugins/estree.ts","../src/tokenizer/context.ts","../src/tokenizer/types.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.ts","../src/util/scopeflags.ts","../src/util/scope.ts","../src/plugins/flow/scope.ts","../src/parser/base.ts","../src/parser/comments.ts","../src/util/whitespace.ts","../src/tokenizer/state.ts","../../babel-helper-string-parser/src/index.ts","../src/tokenizer/index.ts","../src/util/class-scope.ts","../src/util/expression-scope.ts","../src/util/production-parameter.ts","../src/parser/util.ts","../src/parser/node.ts","../src/plugins/flow/index.ts","../src/plugins/jsx/xhtml.ts","../src/plugins/jsx/index.ts","../src/plugins/typescript/scope.ts","../src/parser/lval.ts","../src/plugins/typescript/index.ts","../src/plugins/placeholders.ts","../src/plugins/v8intrinsic.ts","../src/plugin-utils.ts","../src/options.ts","../src/parser/expression.ts","../src/parser/statement.ts","../src/parser/index.ts","../src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n","import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitInUsingBinding:\n    \"'await' is not allowed to be used as a name in 'using' declarations.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n","export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n","import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n","import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","import { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b0000000_0000_01,\n             BIND_KIND_TYPE             = 0b0000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b0000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b0000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b0000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b0000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b00000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b00000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b00000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b00001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b00010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b00100000_0000_00,\n             BIND_FLAGS_TS_IMPORT       = 0b01000000_0000_00,\n             // Whether \"let\" should be allowed in bound names in sloppy mode\n             BIND_FLAGS_NO_LET_IN_LEXICAL = 0b10000000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS|BIND_FLAGS_NO_LET_IN_LEXICAL,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | BIND_FLAGS_NO_LET_IN_LEXICAL,\n             BIND_CATCH_PARAM   = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM|BIND_FLAGS_NO_LET_IN_LEXICAL,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE          ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE          ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM    | BIND_FLAGS_TS_CONST_ENUM                                        ,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0                   | BIND_FLAGS_TS_EXPORT_ONLY,\n             BIND_TS_TYPE_IMPORT= 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_TS_IMPORT     ,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport type * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlags {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { Errors } from \"../parse-error\";\nimport { type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error val must conform to S[key]\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n\n    // TODO(Babel 8): This is only needed for backwards compatibility,\n    // we can remove it.\n    containsInvalid: !!firstInvalidLoc,\n  };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport type * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n","import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport type { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport type Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","import { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport type State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(loc: Position): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, loc.index, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: Undone<N.FlowDeclare>,\n      isClass: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const decl = super.parseExport(node, decorators);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(FlowErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\" as const;\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\" as const;\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startLoc.index) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport type { TokContext } from \"../../tokenizer/context\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { type Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(startLoc: Position): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(startLoc: Position): N.JSXClosingElement {\n      const node = this.startNodeAt(startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n  BIND_FLAGS_TS_IMPORT,\n  SCOPE_TS_MODULE,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\nimport { Errors } from \"../../parse-error\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: number): void {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_FLAGS_NO_LET_IN_LEXICAL,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: typeof charCodes[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(\n          this.parseAssignableListItemTypes(this.parseRestBinding(), flags),\n        );\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(\n    param: Pattern,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    flags: ParseBindingListFlags,\n  ): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param options A set of options described below.\n   * @param options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param options.binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param options.checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param options.strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param options.hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, { at: expression, ancestor });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      type === \"ArrayPattern\" ||\n      type === \"ObjectPattern\" ||\n      type === \"ParenthesizedExpression\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BIND_FLAGS_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: typeof charCodes[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_TS_TYPE_IMPORT,\n  BIND_CLASS,\n  BIND_NONE,\n  BIND_FLAGS_TS_IMPORT,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\nimport { ParseBindingListFlags } from \"../../parser/lval\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  // TODO: Accesor -> Accessor\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      return super\n        .parseBindingList(\n          tt.parenR,\n          charCodes.rightParenthesis,\n          ParseBindingListFlags.IS_FUNCTION_PARAMS,\n        )\n        .map(pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return pattern as any;\n        });\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined | null {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type: N.TsType | N.TsNamedTupleMember = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = type.typeName;\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      // @ts-expect-error refine typings\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return super.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation():\n      | N.TsTypeAnnotation\n      | undefined\n      | null {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined | null {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): N.TsType | undefined | null {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined | null {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | undefined | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined | null {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\" as const;\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return super.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* isHangingDeclaration */ false,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n            /* decorators */ null,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined | null {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined | null =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left, flags);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, {\n                at: this.state.startLoc,\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(TSErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n          );\n        }\n      }\n\n      const importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<N.Node>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        node.exportKind = \"value\";\n\n        if (this.isContextual(tt._type)) {\n          const ch = this.lookaheadCharCode();\n          if (ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk) {\n            this.next();\n            node.exportKind = \"type\";\n          }\n        }\n\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, { at: node });\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n      }\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(\n      param: N.Pattern,\n      flags: ParseBindingListFlags,\n    ) {\n      if (!(flags & ParseBindingListFlags.IS_FUNCTION_PARAMS)) return param;\n\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSSatisfiesExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: typeof charCodes[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  } else {\n    return (\n      expression.type === \"NumericLiteral\" ||\n      expression.type === \"BigIntLiteral\"\n    );\n  }\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression as N.UnaryExpression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node, decorators: N.Decorator[] | null): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(node);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowNewTargetOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n  annexB: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, new.target outside a function or class is not\n  // considered an error.\n  allowNewTargetOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n  // When enabled, the parser will support Annex B syntax.\n  // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n  annexB: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  if (opts && opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, {\n          at: this.state.startLoc,\n        });\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(decorators, this.startNode()),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !this.options.allowNewTargetOutsideFunction\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: Adding 1 is probably wrong.\n          at: createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error kind may not index node\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                  ? // @ts-expect-error node.key has been guarded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n  BIND_CATCH_PARAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport type { Position } from \"../util/location\";\nimport { createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\nimport { ParseBindingListFlags } from \"./lval\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingIdentifier(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  startsUsingForOf(): boolean {\n    const lookahead = this.lookahead();\n    if (lookahead.type === tt._of && !lookahead.containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n              ? Errors.SloppyFunctionAnnexB\n              : Errors.SloppyFunction,\n            { at: this.state.startLoc },\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._using:\n        // using [no LineTerminator here][lookahead != `await`] BindingList[+Using]\n        if (\n          this.hasFollowingLineBreak() ||\n          this.state.containsEsc ||\n          !this.hasFollowingBindingIdentifier()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, {\n            at: this.state.startLoc,\n          });\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(Errors.DecoratorsBeforeAfterExport, {\n            at: classNode.decorators[0],\n          });\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc,\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const startsWithUsing =\n      this.isContextual(tt._using) && !this.hasFollowingLineBreak();\n    const isLetOrUsing =\n      (startsWithLet && this.hasFollowingBindingAtom()) ||\n      (startsWithUsing &&\n        this.hasFollowingBindingIdentifier() &&\n        this.startsUsingForOf());\n    if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n      const initNode = this.startNode<N.VariableDeclaration>();\n      const kind = this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      const isForIn = this.match(tt._in);\n      if (isForIn && startsWithUsing) {\n        this.raise(Errors.ForInUsing, { at: init });\n      }\n      if (\n        (isForIn || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? SCOPE_SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_CATCH_PARAM,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n  ): void {\n    // Unlike \"let\" which must be handled in checkLVal, it suffices to check\n    // await here because `using` must not precede binding patterns.\n    if (kind === \"using\" && !this.inModule && this.match(tt._await)) {\n      this.raise(Errors.AwaitInUsingBinding, { at: this.state.startLoc });\n    }\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, {\n          at: this.state.startLoc,\n        });\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      throw this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    if (node.module) {\n      if (\n        node.specifiers.length !== 1 ||\n        node.specifiers[0].type !== \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(Errors.ImportReflectionNotBinding, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  parseMaybeImportReflection(node: Undone<N.ImportDeclaration>) {\n    let isImportReflection = false;\n    if (this.isContextual(tt._module)) {\n      const lookahead = this.lookahead();\n      const nextType = lookahead.type;\n      if (tokenIsIdentifier(nextType)) {\n        if (nextType !== tt._from) {\n          // import module x\n          isImportReflection = true;\n        } else {\n          const nextNextTokenFirstChar = this.input.charCodeAt(\n            this.nextTokenStartSince(lookahead.end),\n          );\n          if (nextNextTokenFirstChar === charCodes.lowercaseF) {\n            // import module from from ...\n            isImportReflection = true;\n          }\n        }\n      } else if (nextType !== tt.comma) {\n        // import module { x } ...\n        // import module \"foo\"\n        // They are invalid, we will continue parsing and throw\n        // a recoverable error later\n        isImportReflection = true;\n      }\n    }\n    if (isImportReflection) {\n      this.expectPlugin(\"importReflection\");\n      this.next(); // eat tt._module;\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      this.parseMaybeImportReflection(node);\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        // @ts-expect-error attributes have been deprecated\n        node.attributes = attributes;\n      }\n    }\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldParseDefaultImport(node: Undone<N.ImportDeclaration>): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"], bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      in: { type },\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries AssertEntries}\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingTypes | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","Object","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","ImportMetaOutsideModule","message","code","SourceTypeModuleError","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitInUsingBinding","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorsBeforeAfterExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","SloppyFunctionAnnexB","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","toMessage","_excluded","loc","details","SyntaxError","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","template","rest","_excluded2","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","source","arguments","hasPlugin","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","declaration","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_SCOPE_OUTSIDE","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_FLAGS_TS_IMPORT","BIND_FLAGS_NO_LET_IN_LEXICAL","BIND_CLASS","BIND_LEXICAL","BIND_CATCH_PARAM","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_TS_TYPE_IMPORT","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","lastTokStart","ct","canStartJSXElement","containsEsc","firstInvalidTemplateEscapePos","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","annexB","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","FlowParserMixin","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn","hasOwnProperty","unwrapParenthesizedExpression","ParseBindingListFlags","LValParser","operator","arg","checkToRestConversion","elt","element","toReferencedListDeep","parseSpread","parseRestBinding","parseBindingList","ALLOW_EMPTY","parseObjectLike","closeCharCode","allowEmpty","elts","checkCommaAfterRest","parseDecorator","parseAssignableListItem","parseBindingRestProperty","parseBindingProperty","parsePropertyName","ObjectProperty","checkLVal","in","checkClashes","hasParenthesizedAncestor","checkIdentifier","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","declareNameFromIdentifier","identifier","allowPattern","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","TypeScriptParserMixin","tsParseInOutModifiers","tsParseModifiers","bind","allowedModifiers","disallowedModifiers","errorTemplate","tsParseConstModifier","tsParseInOutConstModifiers","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","modified","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","IS_FUNCTION_PARAMS","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","checkType","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","override","IS_CONSTRUCTOR_PARAMS","pp","parameter","isSimpleParameter","tsDisallowOptionalPattern","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","parseExprOp","leftStartLoc","minPrec","isSatisfies","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","isValidAmbientConstInitializer","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","parseClassAccessorProperty","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","parseMaybeDecoratorArguments","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","maybeTakeDecorators","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isPossiblyLiteralEnum","expressions","isUncomputedMemberExpressionChain","estree","isNumber","isNegativeNumber","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrSloppyAnnexBFunctionDeclaration","parseBlock","createNewLexicalScope","parseFunctionId","requireId","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowNewTargetOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","startIndex","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","ParseFunctionFlag","ParseStatementFlag","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasFollowingBindingIdentifier","startsUsingForOf","parseModuleItem","AllowImportExport","AllowDeclaration","AllowFunctionDeclaration","AllowLabeledFunction","parseStatementListItem","allowLabeledFunction","StatementOnly","parseStatement","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithUsing","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","Declaration","HangingDeclaration","Async","discriminant","cases","cur","sawDefault","isCase","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","Expression","hangingDeclaration","isDeclaration","NullableId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkJSONModuleImport","checkNames","isDefault","isFrom","nodes","surrogate","isJSONModuleImport","nonDefaultNamedSpecifier","parseMaybeImportReflection","isImportReflection","nextNextTokenFirstChar","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":";;;;;;;;;;;;;;;;;AAOO,MAAMA,QAAQ,CAAC;AAKpBC,EAAAA,WAAW,CAACC,IAAY,EAAEC,GAAW,EAAEC,KAAa,EAAE;AAAA,IAAA,IAAA,CAJtDF,IAAI,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACJG,MAAM,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACND,KAAK,GAAA,KAAA,CAAA,CAAA;IAGH,IAAI,CAACF,IAAI,GAAGA,IAAI,CAAA;IAChB,IAAI,CAACG,MAAM,GAAGF,GAAG,CAAA;IACjB,IAAI,CAACC,KAAK,GAAGA,KAAK,CAAA;AACpB,GAAA;AACF,CAAA;AAEO,MAAME,cAAc,CAAC;AAM1BL,EAAAA,WAAW,CAACM,KAAe,EAAEC,GAAc,EAAE;AAAA,IAAA,IAAA,CAL7CD,KAAK,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACLC,GAAG,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACHC,QAAQ,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACRC,cAAc,GAAA,KAAA,CAAA,CAAA;IAGZ,IAAI,CAACH,KAAK,GAAGA,KAAK,CAAA;IAElB,IAAI,CAACC,GAAG,GAAGA,GAAG,CAAA;AAChB,GAAA;AACF,CAAA;AAQO,SAASG,8BAA8B,CAC5CC,QAAkB,EAClBC,YAAoB,EACpB;EACA,MAAM;IAAEX,IAAI;IAAEG,MAAM;AAAED,IAAAA,KAAAA;AAAM,GAAC,GAAGQ,QAAQ,CAAA;AACxC,EAAA,OAAO,IAAIZ,QAAQ,CAACE,IAAI,EAAEG,MAAM,GAAGQ,YAAY,EAAET,KAAK,GAAGS,YAAY,CAAC,CAAA;AACxE;;AC5CA,IAAkBC,cAAc,GAAA;AAAA,EAAA,WAAA,EAAA,2BAAA;AAAA,EAAA,qBAAA,EAAA,yCAAA;AAAA,CAAA,CAAA;AAqBhC,MAAMC,OAAO,GAAG,CAACC,IAAc,EAAEC,IAAI,GAAGD,IAAI,CAACE,MAAM,GAAG,CAAC,MAAM;AAC3DC,EAAAA,GAAG,GAAyB;AAC1B,IAAA,OAAOH,IAAI,CAACI,MAAM,CAChB,CAACC,MAAM,EAAEC,GAAG,KAEVD,MAAM,CAACC,GAAG,CAAC,EACb,IAAI,CACL,CAAA;GACF;EACDC,GAAG,CAAgBC,KAAc,EAAE;IACjCR,IAAI,CAACI,MAAM,CAET,CAACK,IAAI,EAAEH,GAAG,EAAEI,CAAC,KAAMA,CAAC,KAAKT,IAAI,GAAIQ,IAAI,CAACH,GAAG,CAAC,GAAGE,KAAK,GAAIC,IAAI,CAACH,GAAG,CAAE,EAChE,IAAI,CACL,CAAA;AACH,GAAA;AACF,CAAC,CAAC,CAAA;AAEF,MAAMK,WAAW,GAAG,CAClB1B,WAAwB,EACxB2B,UAAe,EACfC,WAAgB,KAEhBC,MAAM,CAACd,IAAI,CAACa,WAAW,CAAC,CACrBE,GAAG,CAACT,GAAG,IAAI,CAACA,GAAG,EAAEO,WAAW,CAACP,GAAG,CAAC,CAAC,CAAC,CACnCU,MAAM,CAAC,CAAC,GAAGC,UAAU,CAAC,KAAK,CAAC,CAACA,UAAU,CAAC,CACxCF,GAAG,CAAC,CAAC,CAACT,GAAG,EAAEW,UAAU,CAAC,KAAK,CAC1BX,GAAG,EACH,OAAOW,UAAU,KAAK,UAAU,GAC5B;AAAET,EAAAA,KAAK,EAAES,UAAU;AAAEC,EAAAA,UAAU,EAAE,KAAA;AAAM,CAAC,GACxC,OAAOD,UAAU,CAAClB,OAAO,KAAK,QAAQ,GACjCkB,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EAAAA,UAAU,EAAKlB,OAAO,CAACkB,UAAU,CAAClB,OAAO,CAACoB,KAAK,CAAC,GAAG,CAAC,CAAC,IAC1DF,UAAU,CACf,CAAC,CACDb,MAAM,CACL,CAACgB,QAAQ,EAAE,CAACd,GAAG,EAAEW,UAAU,CAAC,KAC1BH,MAAM,CAACO,cAAc,CAACD,QAAQ,EAAEd,GAAG,EAAA,MAAA,CAAA,MAAA,CAAA;AACjCgB,EAAAA,YAAY,EAAE,IAAA;AAAI,CAAA,EACfL,UAAU,CAAA,CACb,EACJH,MAAM,CAACS,MAAM,CAAC,IAAItC,WAAW,EAAE,EAAE2B,UAAU,CAAC,CAC7C;;AC5DL,mBAAe;AACbY,EAAAA,uBAAuB,EAAE;AACvBC,IAAAA,OAAO,EAAG,CAAwD,uDAAA,CAAA;IAClEC,IAAI,EAAE5B,cAAc,CAAC6B,qBAAAA;GACtB;AACDC,EAAAA,mBAAmB,EAAE;AACnBH,IAAAA,OAAO,EAAG,CAAkE,iEAAA,CAAA;IAC5EC,IAAI,EAAE5B,cAAc,CAAC6B,qBAAAA;AACvB,GAAA;AACF,CAAC;;ACXD,MAAME,gBAAgB,GAAG;AACvBC,EAAAA,YAAY,EAAE,6BAA6B;AAC3CC,EAAAA,oBAAoB,EAAE,uBAAuB;AAC7CC,EAAAA,iBAAiB,EAAE,uBAAuB;AAC1CC,EAAAA,uBAAuB,EAAE,2BAA2B;AACpDC,EAAAA,qBAAqB,EAAE,wBAAwB;AAC/CC,EAAAA,WAAW,EAAE,cAAc;AAC3BC,EAAAA,cAAc,EAAE,kBAAkB;AAClCC,EAAAA,cAAc,EAAE,kBAAkB;AAClCC,EAAAA,YAAY,EAAE,UAAU;AACxBC,EAAAA,gBAAgB,EAAE,yBAAyB;AAC3CC,EAAAA,UAAU,EAAE,YAAY;AACxBC,EAAAA,eAAe,EAAE,kBAAkB;AACnCC,EAAAA,sBAAsB,EAAE,0BAA0B;AAClDC,EAAAA,wBAAwB,EAAE,4BAA4B;AACtDC,EAAAA,aAAa,EAAE,8BAA8B;AAC7CC,EAAAA,uBAAuB,EAAE,0BAA0B;AACnDC,EAAAA,WAAW,EAAE,cAAc;AAC3BC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,IAAI,EAAE,kBAAkB;AACxBC,IAAAA,KAAK,EAAE,mBAAA;GACR;AACDC,EAAAA,kBAAkB,EAAE,sBAAsB;AAC1CC,EAAAA,eAAe,EAAE,kBAAA;AACnB,CAAC,CAAA;AAkBD,MAAMC,iBAAiB,GAAG,CAAC;EAAEC,IAAI;AAAEC,EAAAA,MAAAA;AAA4B,CAAC,KAC9DD,IAAI,KAAK,kBAAkB,GACvBxB,gBAAgB,CAACkB,gBAAgB,CAACQ,MAAM,CAACD,MAAM,CAAC,CAAqB,GACrEzB,gBAAgB,CAACwB,IAAI,CAAC;;ACvB5B,qBAAe;AACbG,EAAAA,mBAAmB,EAAE,CAAC;AAAEC,IAAAA,IAAAA;GAA+B,KACpD,CAAIA,EAAAA,EAAAA,IAAK,CAA2B,0BAAA,CAAA;AACvCC,EAAAA,gBAAgB,EACd,6DAA6D;AAC/DC,EAAAA,qCAAqC,EACnC,0EAA0E;AAC5EC,EAAAA,sBAAsB,EACpB,6DAA6D;AAC/DC,EAAAA,mCAAmC,EACjC,0DAA0D;AAC5DC,EAAAA,8BAA8B,EAC5B,sDAAsD;AACxDC,EAAAA,mBAAmB,EACjB,sEAAsE;AACxEC,EAAAA,sBAAsB,EACpB,kFAAkF;AACpFC,EAAAA,uBAAuB,EAAE,iDAAiD;AAC1EC,EAAAA,cAAc,EAAE,uDAAuD;AACvEC,EAAAA,cAAc,EAAE,0DAA0D;AAC1EC,EAAAA,sBAAsB,EACpB,kEAAkE;AACpEC,EAAAA,qBAAqB,EAAE,mDAAmD;AAC1EC,EAAAA,4BAA4B,EAC1B,4DAA4D;AAC9DC,EAAAA,qBAAqB,EAAE,2CAA2C;AAClEC,EAAAA,kBAAkB,EAAE,yCAAyC;AAC7DC,EAAAA,sBAAsB,EAAE,mCAAmC;AAC3DC,EAAAA,6BAA6B,EAAE,CAAC;AAC9BjB,IAAAA,IAAAA;GAGD,KAAM,CAAyBA,uBAAAA,EAAAA,IAAK,CAAc,aAAA,CAAA;AACnDkB,EAAAA,oCAAoC,EAClC,iHAAiH;AACnHC,EAAAA,qBAAqB,EACnB,2JAA2J;AAC7JC,EAAAA,2BAA2B,EACzB,qHAAqH;AACvHC,EAAAA,oBAAoB,EAClB,iFAAiF;AACnFC,EAAAA,oBAAoB,EAClB,2JAA2J;AAC7JC,EAAAA,kBAAkB,EAAE,iDAAiD;AACrEC,EAAAA,oBAAoB,EAAE,+CAA+C;AACrEC,EAAAA,kBAAkB,EAAE,0CAA0C;AAC9DC,EAAAA,sBAAsB,EACpB,oGAAoG;AACtGC,EAAAA,oBAAoB,EAAE,0CAA0C;AAChEC,EAAAA,sBAAsB,EAAE,6CAA6C;AACrEC,EAAAA,eAAe,EAAE,CAAC;AAAEC,IAAAA,UAAAA;GAAoC,KACrD,CAAIA,EAAAA,EAAAA,UAAW,CAAmE,kEAAA,CAAA;AACrFC,EAAAA,cAAc,EAAE,qCAAqC;AACrDC,EAAAA,oBAAoB,EAAE,oCAAoC;AAC1DC,EAAAA,gBAAgB,EAAE,oCAAoC;AACtDC,EAAAA,0BAA0B,EAAE,yBAAyB;AACrDC,EAAAA,qBAAqB,EAAE,CAAC;IACtBC,SAAS;AACTN,IAAAA,UAAAA;AAIF,GAAC,KACE,CAAA,qGAAA,EAAuGM,SAAU,CAAA,MAAA,EAAQN,UAAW,CAA0B,yBAAA,CAAA;AACjKO,EAAAA,6BAA6B,EAC3B,gEAAgE;AAElEC,EAAAA,sBAAsB,EAAE,CAAC;AACvB1C,IAAAA,IAAAA;GAGD,KACE,IACCA,IAAI,KAAK,gBAAgB,GAAG,QAAQ,GAAG,QACxC,CAAyD,wDAAA,CAAA;AAC5D2C,EAAAA,UAAU,EAAE,qDAAqD;AAEjEC,EAAAA,UAAU,EAAE,yDAAyD;AACrEC,EAAAA,QAAQ,EAAE,+DAA+D;AACzEC,EAAAA,iCAAiC,EAC/B,qEAAqE;AAEvEC,EAAAA,oBAAoB,EAAE,CAAC;AACrB/C,IAAAA,IAAAA;GAGD,KAAM,eAAcA,IAAI,KAAK,gBAAgB,GAAG,OAAO,GAAG,UAAW,CAAE,CAAA,CAAA;AAExEgD,EAAAA,4BAA4B,EAC1B,4EAA4E;AAC9EC,EAAAA,aAAa,EAAE,+BAA+B;AAC9CC,EAAAA,qBAAqB,EAAE,CAAC;AAAEC,IAAAA,UAAAA;GAAoC,KAC3D,CAAsFA,oFAAAA,EAAAA,UAAW,CAAc,aAAA,CAAA;AAClHC,EAAAA,+BAA+B,EAC7B,4DAA4D;AAC9DC,EAAAA,eAAe,EAAE,CAAC;AAAEC,IAAAA,gBAAAA;GAA+C,KAChE,iCACCA,gBAAgB,KAAK,CAAC,GAAG,cAAc,GAAG,sBAC3C,CAAE,CAAA,CAAA;AACLC,EAAAA,0BAA0B,EAAE,kCAAkC;AAC9DC,EAAAA,wBAAwB,EAAE,qCAAqC;AAC/DC,EAAAA,2BAA2B,EACzB,oDAAoD;AACtDC,EAAAA,4BAA4B,EAAE,2CAA2C;AACzEC,EAAAA,0BAA0B,EACxB,kDAAkD;AACpDC,EAAAA,yBAAyB,EACvB,8EAA8E;AAChFC,EAAAA,oBAAoB,EAAE,wBAAwB;AAC9CC,EAAAA,gBAAgB,EAAE,2BAA2B;AAC7CC,EAAAA,2BAA2B,EAAE,yCAAyC;AACtEC,EAAAA,cAAc,EAAE,kBAAkB;AAClCC,EAAAA,YAAY,EAAE,CAAC;AAAEC,IAAAA,KAAAA;GAA0B,KACxC,CAA2BA,yBAAAA,EAAAA,KAAM,CAAE,CAAA,CAAA;AACtCC,EAAAA,qBAAqB,EAAE,gCAAgC;AACvDC,EAAAA,6BAA6B,EAAE,sCAAsC;AACrEC,EAAAA,0BAA0B,EAAE,CAAC;AAAEC,IAAAA,YAAAA;GAAwC,KACpE,CAA6BA,2BAAAA,EAAAA,YAAa,CAAE,CAAA,CAAA;AAC/CC,EAAAA,iBAAiB,EAAE,CAAC;AAAElI,IAAAA,cAAAA;GAA4C,KAC/D,CAAqBA,mBAAAA,EAAAA,cAAe,CAAE,CAAA,CAAA;AACzCmI,EAAAA,UAAU,EAAE,CAAC;AAAEC,IAAAA,QAAAA;AAAqC,GAAC,KAClD,CAA4B1E,0BAAAA,EAAAA,iBAAiB,CAAC0E,QAAQ,CAAE,CAAE,CAAA,CAAA;AAC7DC,EAAAA,iBAAiB,EAAE,CAAC;AAAED,IAAAA,QAAAA;AAAqC,GAAC,KACzD,CAAoC1E,kCAAAA,EAAAA,iBAAiB,CAAC0E,QAAQ,CAAE,CAAE,CAAA,CAAA;AACrEE,EAAAA,aAAa,EAAE,iBAAiB;AAChCC,EAAAA,wBAAwB,EACtB,gEAAgE;AAClEC,EAAAA,wBAAwB,EAAE,CAAC;AAAEC,IAAAA,UAAAA;GAAoC,KAC9D,CAAwBA,sBAAAA,EAAAA,UAAW,CAAG,EAAA,CAAA;AACzCC,EAAAA,8BAA8B,EAAE,2CAA2C;AAC3EC,EAAAA,6BAA6B,EAAE,CAAC;AAC9B3I,IAAAA,cAAAA;GAGD,KAAM,CAAgBA,cAAAA,EAAAA,cAAe,CAAiB,gBAAA,CAAA;AACvD4I,EAAAA,6BAA6B,EAAE,4BAA4B;AAC3DC,EAAAA,qBAAqB,EACnB,wEAAwE;AAC1EC,EAAAA,4BAA4B,EAAE,mCAAmC;AACjEC,EAAAA,kBAAkB,EAAE,CAAC;AAAEC,IAAAA,SAAAA;GAAkC,KACtD,CAASA,OAAAA,EAAAA,SAAU,CAAuB,sBAAA,CAAA;AAC7CC,EAAAA,mBAAmB,EACjB,6EAA6E;AAC/EC,EAAAA,yBAAyB,EAAE,uCAAuC;AAClEC,EAAAA,oBAAoB,EAAE,kCAAkC;AACxDC,EAAAA,gBAAgB,EAAE,2BAA2B;AAC7CC,EAAAA,qBAAqB,EACnB,6DAA6D;AAC/DC,EAAAA,gBAAgB,EAAE,oBAAoB;AACtCC,EAAAA,aAAa,EAAE,CAAC;AAAEC,IAAAA,aAAAA;GAA4C,KAC3D,iEAAgEA,aAAa,CAC3EnI,GAAG,CAACoI,IAAI,IAAIC,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC,CACjCG,IAAI,CAAC,IAAI,CAAE,CAAE,CAAA,CAAA;AAGlBC,EAAAA,mBAAmB,EAAE,CAAC;AAAEL,IAAAA,aAAAA;GAA4C,KACjE,qFAAoFA,aAAa,CAC/FnI,GAAG,CAACoI,IAAI,IAAIC,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC,CACjCG,IAAI,CAAC,IAAI,CAAE,CAAE,CAAA,CAAA;AAClBE,EAAAA,oBAAoB,EAAE,4CAA4C;AAClEC,EAAAA,yBAAyB,EACvB,qFAAqF;AACvFC,EAAAA,gCAAgC,EAC9B,+CAA+C;AACjDC,EAAAA,2BAA2B,EACzB,8DAA8D;AAChEC,EAAAA,iCAAiC,EAAE,CAAC;AAAEtJ,IAAAA,GAAAA;GAAsB,KACzD,CAAiBA,eAAAA,EAAAA,GAAI,CAAuC,sCAAA,CAAA;AAC/DuJ,EAAAA,gCAAgC,EAAE,CAAC;AACjCC,IAAAA,iBAAAA;GAGD,KACE,6DAA4DA,iBAAiB,CAACC,QAAQ,CACrF,EAAE,CACF,CAAG,EAAA,CAAA;AACPC,EAAAA,qBAAqB,EAAE,CAAC;AAAEnE,IAAAA,SAAAA;GAAkC,KACzD,CAAUA,QAAAA,EAAAA,SAAU,CAAkB,iBAAA,CAAA;AACzCoE,EAAAA,wBAAwB,EAAE,2BAA2B;AACrDC,EAAAA,iBAAiB,EAAE,8BAA8B;AACjDC,EAAAA,gBAAgB,EAAE,kCAAkC;AACpDC,EAAAA,gBAAgB,EAAE,mCAAmC;AACrDC,EAAAA,gCAAgC,EAC9B,6FAA6F;AAC/FC,EAAAA,iBAAiB,EACf,yFAAyF;AAC3FC,EAAAA,qBAAqB,EACnB,0DAA0D;AAC5DC,EAAAA,0BAA0B,EACxB,4DAA4D;AAC9DC,EAAAA,qBAAqB,EACnB,iEAAiE;AACnEC,EAAAA,SAAS,EAAE,sBAAsB;AACjCC,EAAAA,kBAAkB,EAAE,gDAAgD;AACpEC,EAAAA,gBAAgB,EAAE,uCAAuC;AACzDC,EAAAA,mBAAmB,EAAE,CAAC;AAAEnL,IAAAA,cAAAA;AAA2C,GAAC,KACjE,CAAA,4DAAA,EAA8DA,cAAe,CAAA,iCAAA,EAAmCA,cAAe,CAAY,WAAA,CAAA;AAC9IoL,EAAAA,wBAAwB,EAAE,CAAC;AAAEpL,IAAAA,cAAAA;GAA4C,KACtE,CAA0BA,wBAAAA,EAAAA,cAAe,CAAE,CAAA,CAAA;AAC9CqL,EAAAA,yCAAyC,EACvC,mIAAmI;AACrIC,EAAAA,2CAA2C,EACzC,qIAAqI;AACvIC,EAAAA,4CAA4C,EAC1C,sIAAsI;AACxIC,EAAAA,aAAa,EAAE,mDAAmD;AAClEC,EAAAA,iBAAiB,EAAE,+CAA+C;AAClEC,EAAAA,cAAc,EACZ,yFAAyF;AAC3FC,EAAAA,oBAAoB,EAClB,0HAA0H;AAC5HC,EAAAA,eAAe,EAAE,uDAAuD;AACxEC,EAAAA,eAAe,EACb,mJAAmJ;AACrJC,EAAAA,iBAAiB,EAAE,4CAA4C;AAC/DC,EAAAA,iBAAiB,EAAE,iDAAiD;AACpEC,EAAAA,wCAAwC,EACtC,kIAAkI;AACpIC,EAAAA,0CAA0C,EACxC,oIAAoI;AACtIC,EAAAA,2CAA2C,EACzC,qIAAqI;AACvIC,EAAAA,6BAA6B,EAAE,kCAAkC;AACjEC,EAAAA,gCAAgC,EAC9B,0FAA0F;AAC5FC,EAAAA,wBAAwB,EAAE,oCAAoC;AAC9DC,EAAAA,sBAAsB,EACpB,yDAAyD;AAC3DC,EAAAA,iBAAiB,EAAE,CAAC;AAAEC,IAAAA,OAAAA;GAA8B,KACjD,CAAsBA,oBAAAA,EAAAA,OAAQ,CAAG,EAAA,CAAA;AACpCC,EAAAA,0BAA0B,EACxB,6DAA6D;AAC/DC,EAAAA,4BAA4B,EAC1B,kEAAkE;AACpEC,EAAAA,mBAAmB,EACjB,iEAAiE;AACnEC,EAAAA,0BAA0B,EACxB,yDAAyD;AAC3DC,EAAAA,sBAAsB,EAAE,0BAA0B;AAClDC,EAAAA,sBAAsB,EAAE,CAAC;AAAE7E,IAAAA,YAAAA;GAAwC,KAChE,CAA4BA,0BAAAA,EAAAA,YAAa,CAAG,EAAA,CAAA;AAC/C8E,EAAAA,eAAe,EAAE,wDAAwD;AACzEC,EAAAA,eAAe,EAAE,CAAC;IAChBC,QAAQ;AACRxE,IAAAA,UAAAA;AAIF,GAAC,KACE,CAAkBA,gBAAAA,EAAAA,UAAU,GAAI,CAAA,EAAA,EAAIA,UAAW,CAAG,EAAA,CAAA,GAAG,EAAG,CAAA,EACvDwE,QAAQ,GAAI,CAAA,YAAA,EAAcA,QAAS,CAAE,CAAA,CAAA,GAAG,EACzC,CAAC,CAAA;AACJC,EAAAA,kCAAkC,EAChC,kFAAkF;AACpFC,EAAAA,0BAA0B,EACxB,gFAAgF;AAClFC,EAAAA,eAAe,EAAE,iDAAiD;AAClEC,EAAAA,0BAA0B,EACxB,qDAAqD;AACvDC,EAAAA,wBAAwB,EACtB,6EAA6E;AAC/EC,EAAAA,iBAAiB,EACf,2DAA2D;AAC7DC,EAAAA,uBAAuB,EAAE,CAAC;IACxBC,MAAM;AACNC,IAAAA,qBAAAA;AAIF,GAAC,KACE,CAAmCD,iCAAAA,EAAAA,MAAO,OAAMA,MAAO,CAAA,CAAA,EAAGC,qBAAsB,CAAE,CAAA,CAAA;AACrFC,EAAAA,6BAA6B,EAC3B,mDAAmD;AACrDC,EAAAA,4BAA4B,EAC1B,kEAAkE;AACpEC,EAAAA,gBAAgB,EACd,uHAAuH;AACzHC,EAAAA,mBAAmB,EAAE,uBAAuB;AAC5CC,EAAAA,kBAAkB,EAAE,kCAAkC;AACtDC,EAAAA,kBAAkB,EAAE,+BAA+B;AACnDC,EAAAA,oBAAoB,EAAE,wBAAwB;AAC9CC,EAAAA,iCAAiC,EAC/B,uDAAuD;AACzDC,EAAAA,gBAAgB,EAAE,CAAC;AAAEnO,IAAAA,cAAAA;GAA4C,KAC9D,CAAcA,YAAAA,EAAAA,cAAe,CAA6B,4BAAA,CAAA;AAC7DoO,EAAAA,sBAAsB,EACpB,uDAAuD;AACzDC,EAAAA,gBAAgB,EAAE,uDAAuD;AACzEC,EAAAA,yBAAyB,EACvB,oDAAA;AACJ,CAAC;;ACxTD,uBAAe;AACbC,EAAAA,YAAY,EAAE,yCAAyC;AAOvDC,EAAAA,mBAAmB,EAAE,CAAC;AAAEC,IAAAA,aAAAA;GAA0C,KAC/D,CAAgBA,cAAAA,EAAAA,aAAc,CAAkB,iBAAA,CAAA;AAOnDC,EAAAA,0BAA0B,EAAE,CAAC;AAAEC,IAAAA,WAAAA;GAAsC,KAClE,CAAWA,SAAAA,EAAAA,WAAY,CAAkB,iBAAA,CAAA;AAE5CC,EAAAA,cAAc,EACZ,qFAAqF;AAEvFC,EAAAA,mBAAmB,EAAE,wDAAwD;AAE7EC,EAAAA,kBAAkB,EAAE,uDAAuD;AAE3EC,EAAAA,UAAU,EAAE,wBAAA;AACd,CAAC;;ACzBM,MAAMC,mCAAmC,GAAG,IAAIC,GAAG,CAAC,CACzD,yBAAyB,EACzB,sBAAsB,EACtB,uBAAuB,EACvB,iBAAiB,CAClB,CAAU,CAAA;AAUX,6BAAe;AAEbC,EAAAA,iBAAiB,EACf,uJAAuJ;AACzJC,EAAAA,0BAA0B,EACxB,iHAAiH;AACnHC,EAAAA,gBAAgB,EACd,4DAA4D;AAC9DC,EAAAA,0BAA0B,EAAE,CAAC;AAAEC,IAAAA,KAAAA;AAAyB,GAAC,KACtD,CAAsBA,oBAAAA,EAAAA,KAAM,qBAAoBA,KAAM,CAAA,gHAAA,EAAkHA,KAAM,CAAK,IAAA,CAAA;AACtLC,EAAAA,eAAe,EACb,yGAAyG;AAC3GC,EAAAA,uBAAuB,EAAE,CAAC;AAAE7L,IAAAA,IAAAA;GAA8C,KACvE,CAAoDD,kDAAAA,EAAAA,iBAAiB,CAAC;AACrEC,IAAAA,IAAAA;AACF,GAAC,CAAE,CAAiC,gCAAA,CAAA;AAMtC8L,EAAAA,mBAAmB,EACjB,mGAAmG;AACrGC,EAAAA,8BAA8B,EAC5B,iEAAiE;AACnEC,EAAAA,8BAA8B,EAC5B,oEAAoE;AACtEC,EAAAA,mBAAmB,EACjB,8DAA8D;AAChEC,EAAAA,sBAAsB,EACpB,sEAAsE;AACxEC,EAAAA,iCAAiC,EAC/B,iHAAA;AACJ,CAAC;;;;ACDD,SAASC,uBAAuB,CAG6C,IAAA,EAAA;EAAA,IAHf;AAC5DC,MAAAA,SAAAA;KAEoC,GAAA,IAAA;IADjC9O,UAAU,GAAA,6BAAA,CAAA,IAAA,EAAA+O,WAAA,CAAA,CAAA;EAOb,OAAO,SAAS1Q,WAAW,CAAC;IAAE2Q,GAAG;AAAEC,IAAAA,OAAAA;AAA6B,GAAC,EAAE;AACjE,IAAA,OAAOlP,WAAW,CAChBmP,WAAW,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACNlP,UAAU,EAAA;AAAEgP,MAAAA,GAAAA;KACjB,CAAA,EAAA;AACEG,MAAAA,KAAK,CACHC,SAGC,GAAG,EAAE,EACN;AACA,QAAA,MAAMJ,GAAG,GAAII,SAAS,CAACJ,GAAG,IAAI,EAAwB,CAAA;AACtD,QAAA,OAAO3Q,WAAW,CAAC;UACjB2Q,GAAG,EAAE,IAAI5Q,QAAQ,CACf,MAAM,IAAI4Q,GAAG,GAAGA,GAAG,CAAC1Q,IAAI,GAAG,IAAI,CAAC0Q,GAAG,CAAC1Q,IAAI,EACxC,QAAQ,IAAI0Q,GAAG,GAAGA,GAAG,CAACvQ,MAAM,GAAG,IAAI,CAACuQ,GAAG,CAACvQ,MAAM,EAC9C,OAAO,IAAIuQ,GAAG,GAAGA,GAAG,CAACxQ,KAAK,GAAG,IAAI,CAACwQ,GAAG,CAACxQ,KAAK,CAC5C;AACDyQ,UAAAA,OAAO,oBAAO,IAAI,CAACA,OAAO,EAAKG,SAAS,CAACH,OAAO,CAAA;AAClD,SAAC,CAAC,CAAA;OACH;AACDA,MAAAA,OAAO,EAAE;AAAErP,QAAAA,KAAK,EAAEqP,OAAO;AAAE3O,QAAAA,UAAU,EAAE,KAAA;OAAO;AAC9CO,MAAAA,OAAO,EAAE;AACPtB,QAAAA,GAAG,GAAoC;AACrC,UAAA,OAAQ,GAAEuP,SAAS,CAAC,IAAI,CAACG,OAAO,CAAE,CAAI,EAAA,EAAA,IAAI,CAACD,GAAG,CAAC1Q,IAAK,CAClD,CAAA,EAAA,IAAI,CAAC0Q,GAAG,CAACvQ,MACV,CAAE,CAAA,CAAA,CAAA;SACJ;QACDkB,GAAG,CAACC,KAAa,EAAE;AACjBM,UAAAA,MAAM,CAACO,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;AAAEb,YAAAA,KAAAA;AAAM,WAAC,CAAC,CAAA;AACnD,SAAA;OACD;AACDyP,MAAAA,GAAG,EAAE;AAAElQ,QAAAA,OAAO,EAAE,WAAW;AAAEmB,QAAAA,UAAU,EAAE,IAAA;OAAM;AAC/CgI,MAAAA,aAAa,EAAE,eAAe,IAAI2G,OAAO,IAAI;AAC3C9P,QAAAA,OAAO,EAAE,uBAAuB;AAChCmB,QAAAA,UAAU,EAAE,IAAA;AACd,OAAA;AACF,KAAC,CACF,CAAA;GACF,CAAA;AACH,CAAA;AAiEO,SAASgP,cAAc,CAC5BC,QAAoD,EACpDC,YAA2B,EAC3B;AAIA,EAAA,IAAIC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;IAC3B,OAAQI,mBAAwC,IAC9CL,cAAc,CAACK,mBAAmB,EAAEJ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;AACpD,GAAA;EAEA,MAAMK,sBAAsB,GAAG,EAG9B,CAAA;EAED,KAAK,MAAMC,UAAU,IAAI3P,MAAM,CAACd,IAAI,CAACmQ,QAAQ,CAAC,EAAE;AAC9C,IAAA,MAAMO,QAAQ,GAAIP,QAAQ,CAAyBM,UAAU,CAAC,CAAA;AAC9D,IAAA,MAAA,KAAA,GACE,OAAOC,QAAQ,KAAK,QAAQ,GACxB;AAAEjP,QAAAA,OAAO,EAAE,MAAMiP,QAAAA;AAAS,OAAC,GAC3B,OAAOA,QAAQ,KAAK,UAAU,GAC9B;AAAEjP,QAAAA,OAAO,EAAEiP,QAAAA;AAAS,OAAC,GACrBA,QAAQ;AALR,MAAA;AAAEjP,QAAAA,OAAAA;OAAkB,GAAA,KAAA;MAANkP,IAAI,GAAA,6BAAA,CAAA,KAAA,EAAAC,YAAA,CAAA,CAAA;IAMxB,MAAMlB,SAAS,GAAG,OAAOjO,OAAO,KAAK,QAAQ,GAAG,MAAMA,OAAO,GAAGA,OAAO,CAAA;AAEvE+O,IAAAA,sBAAsB,CAACC,UAAU,CAAC,GAAGhB,uBAAuB,CAAA,MAAA,CAAA,MAAA,CAAA;MAC1D/N,IAAI,EAAE5B,cAAc,CAACgQ,WAAW;MAChCW,UAAU;AACVf,MAAAA,SAAAA;AAAS,KAAA,EACLU,YAAY,GAAG;AAAEA,MAAAA,YAAAA;AAAa,KAAC,GAAG,EAAE,EACrCO,IAAI,CACP,CAAA,CAAA;AACJ,GAAA;AAEA,EAAA,OAAOH,sBAAsB,CAAA;AAC/B,CAAA;AAWO,MAAMK,MAAM,GACdX,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EAAAA,cAAc,CAACY,YAAY,CAAC,EAC5BZ,cAAc,CAACa,cAAc,CAAC,EAC9Bb,cAAc,CAACc,gBAAgB,CAAC,EAChCd,cAAe,CAAiB,gBAAA,CAAA,CAACe,sBAAsB,CAAC,CAC5D;;AC9MD,MAAM;AAAE5P,EAAAA,cAAAA;AAAe,CAAC,GAAGP,MAAM,CAAA;AACjC,MAAMoQ,cAAc,GAAG,CAAC7Q,MAAW,EAAEC,GAAW,KAC9Ce,cAAc,CAAChB,MAAM,EAAEC,GAAG,EAAE;AAAEY,EAAAA,UAAU,EAAE,KAAK;EAAEV,KAAK,EAAEH,MAAM,CAACC,GAAG,CAAA;AAAE,CAAC,CAAC,CAAA;AAExE,SAAS6Q,gBAAgB,CAACC,IAAS,EAAE;AACnCA,EAAAA,IAAI,CAACxB,GAAG,CAACrQ,KAAK,IAAI2R,cAAc,CAACE,IAAI,CAACxB,GAAG,CAACrQ,KAAK,EAAE,OAAO,CAAC,CAAA;AACzD6R,EAAAA,IAAI,CAACxB,GAAG,CAACpQ,GAAG,IAAI0R,cAAc,CAACE,IAAI,CAACxB,GAAG,CAACpQ,GAAG,EAAE,OAAO,CAAC,CAAA;AAErD,EAAA,OAAO4R,IAAI,CAAA;AACb,CAAA;AAEA,aAAA,CAAgBC,UAAyB,IACvC,MAAMC,iBAAiB,SAASD,UAAU,CAAmB;AAC3DE,EAAAA,KAAK,GAAS;IACZ,MAAMC,IAAI,GAAGL,gBAAgB,CAAC,KAAK,CAACI,KAAK,EAAE,CAAC,CAAA;AAE5C,IAAA,IAAI,IAAI,CAACE,OAAO,CAACC,MAAM,EAAE;MACvBF,IAAI,CAACE,MAAM,GAAGF,IAAI,CAACE,MAAM,CAAC3Q,GAAG,CAACoQ,gBAAgB,CAAC,CAAA;AACjD,KAAA;AAEA,IAAA,OAAOK,IAAI,CAAA;AACb,GAAA;AAGAG,EAAAA,kBAAkB,CAAC;IAAEC,OAAO;AAAEC,IAAAA,KAAAA;AAAM,GAAC,EAAyB;IAC5D,IAAIC,KAAoB,GAAG,IAAI,CAAA;IAC/B,IAAI;AACFA,MAAAA,KAAK,GAAG,IAAIC,MAAM,CAACH,OAAO,EAAEC,KAAK,CAAC,CAAA;AACpC,KAAC,CAAC,OAAOG,CAAC,EAAE,EAGZ;AACA,IAAA,MAAMZ,IAAI,GAAG,IAAI,CAACa,kBAAkB,CAAwBH,KAAK,CAAC,CAAA;IAClEV,IAAI,CAACU,KAAK,GAAG;MAAEF,OAAO;AAAEC,MAAAA,KAAAA;KAAO,CAAA;AAE/B,IAAA,OAAOT,IAAI,CAAA;AACb,GAAA;EAGAc,kBAAkB,CAAC1R,KAAU,EAAU;AAErC,IAAA,IAAI2R,MAAqB,CAAA;IACzB,IAAI;AACFA,MAAAA,MAAM,GAAGC,MAAM,CAAC5R,KAAK,CAAC,CAAA;AACxB,KAAC,CAAC,OAAM,OAAA,EAAA;AACN2R,MAAAA,MAAM,GAAG,IAAI,CAAA;AACf,KAAA;AACA,IAAA,MAAMf,IAAI,GAAG,IAAI,CAACa,kBAAkB,CAAwBE,MAAM,CAAC,CAAA;IACnEf,IAAI,CAACiB,MAAM,GAAG9O,MAAM,CAAC6N,IAAI,CAAC5Q,KAAK,IAAIA,KAAK,CAAC,CAAA;AAEzC,IAAA,OAAO4Q,IAAI,CAAA;AACb,GAAA;EAGAkB,mBAAmB,CAAC9R,KAAU,EAAU;IAGtC,MAAM+R,OAAa,GAAG,IAAI,CAAA;AAC1B,IAAA,MAAMnB,IAAI,GAAG,IAAI,CAACa,kBAAkB,CAACM,OAAO,CAAC,CAAA;IAC7CnB,IAAI,CAACmB,OAAO,GAAGhP,MAAM,CAAC6N,IAAI,CAAC5Q,KAAK,IAAIA,KAAK,CAAC,CAAA;AAE1C,IAAA,OAAO4Q,IAAI,CAAA;AACb,GAAA;EAEAa,kBAAkB,CAAmBzR,KAAU,EAAE;AAE/C,IAAA,OAAO,IAAI,CAACgS,YAAY,CAAIhS,KAAK,EAAE,SAAS,CAAC,CAAA;AAC/C,GAAA;EAGAiS,kBAAkB,CAACjS,KAAU,EAAU;AACrC,IAAA,OAAO,IAAI,CAACyR,kBAAkB,CAACzR,KAAK,CAAC,CAAA;AACvC,GAAA;EAEAkS,mBAAmB,CAAClS,KAAU,EAAO;AACnC,IAAA,OAAO,IAAI,CAACyR,kBAAkB,CAACzR,KAAK,CAAC,CAAA;AACvC,GAAA;AAGAmS,EAAAA,gBAAgB,GAAW;AACzB,IAAA,OAAO,IAAI,CAACV,kBAAkB,CAAC,IAAI,CAAC,CAAA;AACtC,GAAA;EAEAW,mBAAmB,CAACpS,KAAc,EAAoB;AACpD,IAAA,OAAO,IAAI,CAACyR,kBAAkB,CAACzR,KAAK,CAAC,CAAA;AACvC,GAAA;EAGAqS,eAAe,CAACC,SAAsB,EAAyB;AAC7D,IAAA,MAAMC,UAAU,GAAGD,SAAS,CAACtS,KAA+B,CAAA;IAC5D,OAAOsS,SAAS,CAACtS,KAAK,CAAA;IAEtBuS,UAAU,CAAC1P,IAAI,GAAG,SAAS,CAAA;AAE3B0P,IAAAA,UAAU,CAACC,GAAG,GAAGD,UAAU,CAACE,KAAK,CAACD,GAAG,CAAA;AACrCD,IAAAA,UAAU,CAACvS,KAAK,GAAGuS,UAAU,CAACE,KAAK,CAACC,eAAe,CAAA;IAEnD,MAAMC,IAAI,GAAGL,SAAyC,CAAA;IACtDK,IAAI,CAAC9P,IAAI,GAAG,qBAAqB,CAAA;IACjC8P,IAAI,CAACJ,UAAU,GAAGA,UAAU,CAAA;AAE5BI,IAAAA,IAAI,CAACL,SAAS,GAAGC,UAAU,CAACE,KAAK,CAACG,QAAQ,CAAA;IAE1C,OAAOL,UAAU,CAACE,KAAK,CAAA;AAEvB,IAAA,OAAOE,IAAI,CAAA;AACb,GAAA;AAMAE,EAAAA,YAAY,CAACjC,IAAoC,EAAEkC,OAAgB,EAAQ;AACzE,IAAA,KAAK,CAACD,YAAY,CAACjC,IAAI,EAAEkC,OAAO,CAAC,CAAA;IACjClC,IAAI,CAAC2B,UAAU,GAAG,KAAK,CAAA;AACzB,GAAA;EAEAQ,gBAAgB,CAACnC,IAAkC,EAAQ;IACzD,IAAIA,IAAI,IAAI,IAAI,IAAI,IAAI,CAACoC,gBAAgB,CAACpC,IAAI,CAAC,EAAE;AAE/C,MAAA,IAAI,CAACmC,gBAAgB,CAAEnC,IAAI,CAAiC5Q,KAAK,CAAC,CAAA;AACpE,KAAC,MAAM;AACL,MAAA,KAAK,CAAC+S,gBAAgB,CAACnC,IAAI,CAAC,CAAA;AAC9B,KAAA;AACF,GAAA;EAEAqC,4BAA4B,CAACC,MAAsC,EAAE;AACnE,IAAA,OAAQA,MAAM,CACXlT,KAAK,CAACmT,MAAM,CAAA;AACjB,GAAA;EAEAC,gBAAgB,CAACT,IAAiB,EAAW;AAAA,IAAA,IAAA,qBAAA,CAAA;AAC3C,IAAA,OACEA,IAAI,CAAC9P,IAAI,KAAK,qBAAqB,IACnC8P,IAAI,CAACJ,UAAU,CAAC1P,IAAI,KAAK,SAAS,IAClC,OAAO8P,IAAI,CAACJ,UAAU,CAACvS,KAAK,KAAK,QAAQ,IACzC,EAAA,CAAA,qBAAA,GAAC2S,IAAI,CAACJ,UAAU,CAACE,KAAK,KAAA,IAAA,IAArB,sBAAuBY,aAAa,CAAA,CAAA;AAEzC,GAAA;EAEAC,cAAc,CACZ1C,IAA0B,EAC1B2C,eAA2C,EAC3CC,QAAiB,EACjBxU,GAAc,EACdyU,eAA2D,EACrD;AACN,IAAA,KAAK,CAACH,cAAc,CAClB1C,IAAI,EACJ2C,eAAe,EACfC,QAAQ,EACRxU,GAAG,EACHyU,eAAe,CAChB,CAAA;AAED,IAAA,MAAMC,mBAAmB,GAAG9C,IAAI,CAAC+C,UAAU,CAACpT,GAAG,CAACqT,CAAC,IAC/C,IAAI,CAACvB,eAAe,CAACuB,CAAC,CAAC,CACxB,CAAA;IAEDhD,IAAI,CAACiD,IAAI,GAAGH,mBAAmB,CAACI,MAAM,CAAClD,IAAI,CAACiD,IAAI,CAAC,CAAA;IACjD,OAAOjD,IAAI,CAAC+C,UAAU,CAAA;AACxB,GAAA;AAEAI,EAAAA,eAAe,CACbC,SAAsB,EACtBd,MAAqB,EACrBe,WAAoB,EACpBnB,OAAgB,EAChBoB,aAAsB,EACtBC,iBAA0B,EACpB;AACN,IAAA,IAAI,CAACC,WAAW,CACdlB,MAAM,EACNe,WAAW,EACXnB,OAAO,EACPoB,aAAa,EACbC,iBAAiB,EACjB,aAAa,EACb,IAAI,CACL,CAAA;IACD,IAAIjB,MAAM,CAACmB,cAAc,EAAE;AAEzBnB,MAAAA,MAAM,CAAClT,KAAK,CAACqU,cAAc,GAAGnB,MAAM,CAACmB,cAAc,CAAA;MACnD,OAAOnB,MAAM,CAACmB,cAAc,CAAA;AAC9B,KAAA;AACAL,IAAAA,SAAS,CAACH,IAAI,CAACS,IAAI,CAACpB,MAAM,CAAC,CAAA;AAC7B,GAAA;AAEAqB,EAAAA,gBAAgB,GAAQ;AACtB,IAAA,MAAM3D,IAAI,GAAG,KAAK,CAAC2D,gBAAgB,EAAE,CAAA;AACF,IAAA;MACjC,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC,QAAQ,EAAE,eAAe,CAAC,EAAE;AACpD,QAAA,OAAO5D,IAAI,CAAA;AACb,OAAA;AACF,KAAA;AACA,IAAA,OAAO,IAAI,CAAC6D,qCAAqC,CAAC7D,IAAI,CAAC,CAAA;AACzD,GAAA;EAEA6D,qCAAqC,CACnC7D,IAAmB,EACQ;AAC3B,IAAA,MAAMjI,IAAI,GAAG,KAAK,CAAC+L,gBAAgB,CAAC9D,IAAI,CAAC,CAAA;AACzCA,IAAAA,IAAI,GAAGA,IAAW,CAAA;IAClB,OAAOA,IAAI,CAAC+D,EAAE,CAAA;IAEd/D,IAAI,CAACjI,IAAI,GAAGA,IAAI,CAAA;IAEhBiI,IAAI,CAAC/N,IAAI,GAAG,mBAAmB,CAAA;AAC/B,IAAA,OAAO+N,IAAI,CAAA;AACb,GAAA;EAEAgE,aAAa,CAAChE,IAAY,EAAW;AACA,IAAA;MACjC,IAAI,CAAC,IAAI,CAAC4D,eAAe,CAAC,QAAQ,EAAE,eAAe,CAAC,EAAE;AACpD,QAAA,OAAO,KAAK,CAACI,aAAa,CAAChE,IAAI,CAAC,CAAA;AAClC,OAAA;AACF,KAAA;AACA,IAAA,OAAOA,IAAI,CAAC/N,IAAI,KAAK,mBAAmB,CAAA;AAC1C,GAAA;EAEA6R,gBAAgB,CAAC9D,IAAY,EAAU;AACF,IAAA;MACjC,IAAI,CAAC,IAAI,CAAC4D,eAAe,CAAC,QAAQ,EAAE,eAAe,CAAC,EAAE;AACpD,QAAA,OAAO,KAAK,CAACE,gBAAgB,CAAC9D,IAAI,CAAC,CAAA;AACrC,OAAA;AACF,KAAA;IACA,OAAOA,IAAI,CAACjI,IAAI,CAAA;AAClB,GAAA;AAGAqJ,EAAAA,YAAY,CAAsBhS,KAAU,EAAE6C,IAAe,EAAK;IAChE,MAAM+N,IAAI,GAAG,KAAK,CAACoB,YAAY,CAAIhS,KAAK,EAAE6C,IAAI,CAAC,CAAA;AAE/C+N,IAAAA,IAAI,CAAC4B,GAAG,GAAG5B,IAAI,CAAC6B,KAAK,CAACD,GAAG,CAAA;IACzB,OAAO5B,IAAI,CAAC6B,KAAK,CAAA;AAEjB,IAAA,OAAO7B,IAAI,CAAA;AACb,GAAA;EAEAiE,iBAAiB,CACfjE,IAAgB,EAChBkE,eAAgC,EAChCC,QAAiB,GAAG,KAAK,EACnB;IACN,KAAK,CAACF,iBAAiB,CAACjE,IAAI,EAAEkE,eAAe,EAAEC,QAAQ,CAAC,CAAA;IACxDnE,IAAI,CAAC2B,UAAU,GAAG3B,IAAI,CAACiD,IAAI,CAAChR,IAAI,KAAK,gBAAgB,CAAA;AACvD,GAAA;AAGAuR,EAAAA,WAAW,CAGTxD,IAAe,EACfqD,WAAoB,EACpBnB,OAAgB,EAChBoB,aAAsB,EACtBc,gBAAyB,EACzBnS,IAAe,EACfoS,YAAqB,GAAG,KAAK,EACH;AAC1B,IAAA,IAAIC,QAAQ,GAAG,IAAI,CAACC,SAAS,EAAgB,CAAA;AAC7CD,IAAAA,QAAQ,CAACjS,IAAI,GAAG2N,IAAI,CAAC3N,IAAI,CAAA;AACzBiS,IAAAA,QAAQ,GAAG,KAAK,CAACd,WAAW,CAE1Bc,QAAQ,EACRjB,WAAW,EACXnB,OAAO,EACPoB,aAAa,EACbc,gBAAgB,EAChBnS,IAAI,EACJoS,YAAY,CACb,CAAA;IAEDC,QAAQ,CAACrS,IAAI,GAAG,oBAAoB,CAAA;IACpC,OAAOqS,QAAQ,CAACjS,IAAI,CAAA;IAEpB2N,IAAI,CAAC5Q,KAAK,GAAGkV,QAAQ,CAAA;IACrB,IAAIrS,IAAI,KAAK,oBAAoB,EAAE;MACjC+N,IAAI,CAACwE,QAAQ,GAAG,KAAK,CAAA;AACvB,KAAA;AACA,IAAA,OAAO,IAAI,CAACC,UAAU,CAEpBzE,IAAI,EACJ,kBAAkB,CACnB,CAAA;AACH,GAAA;EAEA0E,kBAAkB,CAAC,GAAGC,IAAuB,EAAO;IAClD,MAAMC,YAAY,GAAG,KAAK,CAACF,kBAAkB,CAAC,GAAGC,IAAI,CAAQ,CAAA;AAC1B,IAAA;MACjC,IAAI,CAAC,IAAI,CAACf,eAAe,CAAC,QAAQ,EAAE,eAAe,CAAC,EAAE;AACpD,QAAA,OAAOgB,YAAY,CAAA;AACrB,OAAA;AACF,KAAA;IACAA,YAAY,CAAC3S,IAAI,GAAG,oBAAoB,CAAA;AACxC,IAAA,OAAO2S,YAAY,CAAA;AACrB,GAAA;EAEAC,yBAAyB,CAAC,GAAGF,IAA8B,EAAO;IAChE,MAAMC,YAAY,GAAG,KAAK,CAACC,yBAAyB,CAAC,GAAGF,IAAI,CAAQ,CAAA;AACjC,IAAA;MACjC,IAAI,CAAC,IAAI,CAACf,eAAe,CAAC,QAAQ,EAAE,eAAe,CAAC,EAAE;AACpD,QAAA,OAAOgB,YAAY,CAAA;AACrB,OAAA;AACF,KAAA;IACAA,YAAY,CAAC3S,IAAI,GAAG,oBAAoB,CAAA;IACxC2S,YAAY,CAACJ,QAAQ,GAAG,KAAK,CAAA;AAC7B,IAAA,OAAOI,YAAY,CAAA;AACrB,GAAA;EAEAE,iBAAiB,CACfC,IAAoB,EACpB1B,WAAoB,EACpBnB,OAAgB,EAChB8C,SAAkB,EAClBC,UAAmB,EACgB;AACnC,IAAA,MAAMjF,IAAsB,GAAG,KAAK,CAAC8E,iBAAiB,CACpDC,IAAI,EACJ1B,WAAW,EACXnB,OAAO,EACP8C,SAAS,EACTC,UAAU,CACJ,CAAA;AAER,IAAA,IAAIjF,IAAI,EAAE;MACRA,IAAI,CAAC/N,IAAI,GAAG,UAAU,CAAA;AACtB,MAAA,IAAK+N,IAAI,CAA0B3N,IAAI,KAAK,QAAQ,EAAE;QACpD2N,IAAI,CAAC3N,IAAI,GAAG,MAAM,CAAA;AACpB,OAAA;MACA2N,IAAI,CAACkF,SAAS,GAAG,KAAK,CAAA;AACxB,KAAA;AAEA,IAAA,OAAOlF,IAAI,CAAA;AACb,GAAA;EAEAmF,mBAAmB,CACjBJ,IAAsB,EACtBK,QAAqC,EACrCJ,SAAkB,EAClBK,mBAA6C,EACR;AACrC,IAAA,MAAMrF,IAAsB,GAAG,KAAK,CAACmF,mBAAmB,CACtDJ,IAAI,EACJK,QAAQ,EACRJ,SAAS,EACTK,mBAAmB,CACb,CAAA;AAER,IAAA,IAAIrF,IAAI,EAAE;MACRA,IAAI,CAAC3N,IAAI,GAAG,MAAM,CAAA;MAClB2N,IAAI,CAAC/N,IAAI,GAAG,UAAU,CAAA;AACxB,KAAA;AAEA,IAAA,OAAO+N,IAAI,CAAA;AACb,GAAA;AAEAsF,EAAAA,WAAW,CACTrT,IAAY,EACZsT,yBAAkC,EAClCC,OAAqB,EACrB;AACA,IAAA,OAAOvT,IAAI,KAAK,UAAU,GACtB,OAAO,GACP,KAAK,CAACqT,WAAW,CAACrT,IAAI,EAAEsT,yBAAyB,EAAEC,OAAO,CAAC,CAAA;AACjE,GAAA;AAEAC,EAAAA,YAAY,CAACzF,IAAY,EAAE0F,SAAmB,EAAW;IACvD,IAAI1F,IAAI,IAAI,IAAI,IAAI,IAAI,CAACoC,gBAAgB,CAACpC,IAAI,CAAC,EAAE;MAC/C,OAAO,IAAI,CAACyF,YAAY,CAACzF,IAAI,CAAC5Q,KAAK,EAAEsW,SAAS,CAAC,CAAA;AACjD,KAAA;AACA,IAAA,OAAO,KAAK,CAACD,YAAY,CAACzF,IAAI,EAAE0F,SAAS,CAAC,CAAA;AAC5C,GAAA;AAEAC,EAAAA,YAAY,CAAC3F,IAAY,EAAE4F,KAAc,GAAG,KAAK,EAAQ;IACvD,IAAI5F,IAAI,IAAI,IAAI,IAAI,IAAI,CAACoC,gBAAgB,CAACpC,IAAI,CAAC,EAAE;MAC/C,MAAM;QAAE9Q,GAAG;AAAEE,QAAAA,KAAAA;AAAM,OAAC,GAAG4Q,IAAI,CAAA;AAC3B,MAAA,IAAI,IAAI,CAACgE,aAAa,CAAC9U,GAAG,CAAC,EAAE;AAC3B,QAAA,IAAI,CAAC2W,UAAU,CAACC,cAAc,CAC5B,IAAI,CAAChC,gBAAgB,CAAC5U,GAAG,CAAC,EAC1BA,GAAG,CAACsP,GAAG,CAACrQ,KAAK,CACd,CAAA;AACH,OAAA;AACA,MAAA,IAAI,CAACwX,YAAY,CAACvW,KAAK,EAAEwW,KAAK,CAAC,CAAA;AACjC,KAAC,MAAM;AACL,MAAA,KAAK,CAACD,YAAY,CAAC3F,IAAI,EAAE4F,KAAK,CAAC,CAAA;AACjC,KAAA;AACF,GAAA;AAEAG,EAAAA,gCAAgC,CAC9BhB,IAAY,EACZiB,MAAe,EACfJ,KAAc,EACd;IACA,IAAIb,IAAI,CAAC1S,IAAI,KAAK,KAAK,IAAI0S,IAAI,CAAC1S,IAAI,KAAK,KAAK,EAAE;AAC9C,MAAA,IAAI,CAAC4T,KAAK,CAACxG,MAAM,CAAClG,kBAAkB,EAAE;QAAE2M,EAAE,EAAEnB,IAAI,CAAC7V,GAAAA;AAAI,OAAC,CAAC,CAAA;AACzD,KAAC,MAAM,IAAI6V,IAAI,CAACzC,MAAM,EAAE;AACtB,MAAA,IAAI,CAAC2D,KAAK,CAACxG,MAAM,CAACjG,gBAAgB,EAAE;QAAE0M,EAAE,EAAEnB,IAAI,CAAC7V,GAAAA;AAAI,OAAC,CAAC,CAAA;AACvD,KAAC,MAAM;MACL,KAAK,CAAC6W,gCAAgC,CAAChB,IAAI,EAAEiB,MAAM,EAAEJ,KAAK,CAAC,CAAA;AAC7D,KAAA;AACF,GAAA;AAEAO,EAAAA,oBAAoB,CAClBC,UAAqB,EACrBC,QAAiB,EACd;IACH,MAAMrG,IAAI,GAAG,KAAK,CAACmG,oBAAoB,CAACC,UAAU,EAAEC,QAAQ,CAAC,CAAA;AAE7D,IAAA,IAAIrG,IAAI,CAACsG,MAAM,CAACrU,IAAI,KAAK,QAAQ,EAAE;MAChC+N,IAAI,CAAwC/N,IAAI,GAAG,kBAAkB,CAAA;MACrE+N,IAAI,CAAwCuG,MAAM,GAAGvG,IAAI,CAACwG,SAAS,CAAC,CAAC,CAAC,CAAA;AACvE,MAAA,IAAI,IAAI,CAACC,SAAS,CAAC,kBAAkB,CAAC,EAAE;AAAA,QAAA,IAAA,gBAAA,CAAA;QACrCzG,IAAI,CAAwC0G,UAAU,GAAA,CAAA,gBAAA,GACrD1G,IAAI,CAACwG,SAAS,CAAC,CAAC,CAAC,KAAA,IAAA,GAAA,gBAAA,GAAI,IAAI,CAAA;AAC7B,OAAA;MAEA,OAAOxG,IAAI,CAACwG,SAAS,CAAA;MAErB,OAAOxG,IAAI,CAACsG,MAAM,CAAA;AACpB,KAAA;AAEA,IAAA,OAAOtG,IAAI,CAAA;AACb,GAAA;EAEA2G,qBAAqB,CACnB3G,IAG4B,EAE5B;AAEA,IAAA,IAAIA,IAAI,CAAC/N,IAAI,KAAK,kBAAkB,EAAE;AACpC,MAAA,OAAA;AACF,KAAA;AAEA,IAAA,KAAK,CAAC0U,qBAAqB,CAAC3G,IAAI,CAAC,CAAA;AACnC,GAAA;AAEA4G,EAAAA,WAAW,CACTR,UAA+B,EAC/BS,UAAgC,EAChC;AACA,IAAA,MAAMC,cAAc,GAAG,IAAI,CAACC,KAAK,CAACC,eAAe,CAAA;IACjD,MAAMhH,IAAI,GAAG,KAAK,CAAC4G,WAAW,CAACR,UAAU,EAAES,UAAU,CAAC,CAAA;IAEtD,QAAQ7G,IAAI,CAAC/N,IAAI;AACf,MAAA,KAAK,sBAAsB;QAEzB+N,IAAI,CAACiH,QAAQ,GAAG,IAAI,CAAA;AACpB,QAAA,MAAA;AAEF,MAAA,KAAK,wBAAwB;AAC3B,QAAA,IACEjH,IAAI,CAACkH,UAAU,CAACpY,MAAM,KAAK,CAAC,IAE5BkR,IAAI,CAACkH,UAAU,CAAC,CAAC,CAAC,CAACjV,IAAI,KAAK,0BAA0B,EACtD;UAEA+N,IAAI,CAAC/N,IAAI,GAAG,sBAAsB,CAAA;UAElC+N,IAAI,CAACiH,QAAQ,GAAGjH,IAAI,CAACkH,UAAU,CAAC,CAAC,CAAC,CAACD,QAAQ,CAAA;UAC3C,OAAOjH,IAAI,CAACkH,UAAU,CAAA;AACxB,SAAA;AAGF,MAAA,KAAK,0BAA0B;AAC7B,QAAA;AAAA,UAAA,IAAA,qBAAA,CAAA;UACE,MAAM;AAAEC,YAAAA,WAAAA;AAAY,WAAC,GAAGnH,IAAI,CAAA;UAC5B,IACE,CAAAmH,WAAW,IAAA,IAAA,GAAA,KAAA,CAAA,GAAXA,WAAW,CAAElV,IAAI,MAAK,kBAAkB,IACxC,CAAAkV,CAAAA,qBAAAA,GAAAA,WAAW,CAACN,UAAU,qBAAtB,qBAAwB/X,CAAAA,MAAM,IAAG,CAAC,IAElCqY,WAAW,CAAChZ,KAAK,KAAK6R,IAAI,CAAC7R,KAAK,EAChC;AACA,YAAA,IAAI,CAACiZ,kBAAkB,CACrBpH,IAAI,EAKJ8G,cAAc,CACf,CAAA;AACH,WAAA;AACF,SAAA;AAEA,QAAA,MAAA;AAAM,KAAA;AAGV,IAAA,OAAO9G,IAAI,CAAA;AACb,GAAA;EAEAqH,cAAc,CACZC,IAAkB,EAClBlC,QAAkB,EAClBmC,OAAmC,EACnCR,KAA4B,EAC5B;AACA,IAAA,MAAM/G,IAAI,GAAG,KAAK,CAACqH,cAAc,CAACC,IAAI,EAAElC,QAAQ,EAAEmC,OAAO,EAAER,KAAK,CAAC,CAAA;IAEjE,IAAIA,KAAK,CAACS,mBAAmB,EAAE;MAE7B,IACExH,IAAI,CAAC/N,IAAI,KAAK,0BAA0B,IACxC+N,IAAI,CAAC/N,IAAI,KAAK,wBAAwB,EACtC;QACA+N,IAAI,CAAC/N,IAAI,GAAG+N,IAAI,CAAC/N,IAAI,CAACwV,SAAS,CAAC,CAAC,CAAC,CAAA;AACpC,OAAA;MACA,IAAIV,KAAK,CAACW,IAAI,EAAE;AACd,QAAA,MAAMC,KAAK,GAAG,IAAI,CAACC,eAAe,CAAC5H,IAAI,CAAC,CAAA;QACxC2H,KAAK,CAAChG,UAAU,GAAG3B,IAAI,CAAA;AACvB,QAAA,OAAO,IAAI,CAACyE,UAAU,CAACkD,KAAK,EAAE,iBAAiB,CAAC,CAAA;AAClD,OAAA;AACF,KAAC,MAAM,IACL3H,IAAI,CAAC/N,IAAI,KAAK,kBAAkB,IAChC+N,IAAI,CAAC/N,IAAI,KAAK,gBAAgB,EAC9B;MACA+N,IAAI,CAACqG,QAAQ,GAAG,KAAK,CAAA;AACvB,KAAA;AAEA,IAAA,OAAOrG,IAAI,CAAA;AACb,GAAA;EAEA6H,wBAAwB,CAAC7H,IAAY,EAAW;AAC9C,IAAA,IAAIA,IAAI,CAAC/N,IAAI,KAAK,iBAAiB,EAAE;MACnC+N,IAAI,GAAGA,IAAI,CAAC2B,UAAU,CAAA;AACxB,KAAA;AACA,IAAA,OAAO,KAAK,CAACkG,wBAAwB,CAAC7H,IAAI,CAAC,CAAA;AAC7C,GAAA;EAGAoC,gBAAgB,CAACpC,IAAY,EAAW;AACtC,IAAA,OAAOA,IAAI,CAAC/N,IAAI,KAAK,UAAU,IAAI+N,IAAI,CAAC3N,IAAI,KAAK,MAAM,IAAI,CAAC2N,IAAI,CAACsC,MAAM,CAAA;AACzE,GAAA;EAEAwF,cAAc,CAAC9H,IAAY,EAAW;AACpC,IAAA,OAAOA,IAAI,CAACsC,MAAM,IAAItC,IAAI,CAAC3N,IAAI,KAAK,KAAK,IAAI2N,IAAI,CAAC3N,IAAI,KAAK,KAAK,CAAA;AAClE,GAAA;AAEA0V,EAAAA,YAAY,CACV/H,IAAe,EACf/N,IAAe,EACf+V,MAAgB,EACb;AACH,IAAA,OAAOjI,gBAAgB,CAAC,KAAK,CAACgI,YAAY,CAAC/H,IAAI,EAAE/N,IAAI,EAAE+V,MAAM,CAAC,CAAC,CAAA;AACjE,GAAA;AAEAZ,EAAAA,kBAAkB,CAACpH,IAAY,EAAEoF,QAAkB,EAAE;AACnD,IAAA,KAAK,CAACgC,kBAAkB,CAACpH,IAAI,EAAEoF,QAAQ,CAAC,CAAA;IACxCrF,gBAAgB,CAACC,IAAI,CAAC,CAAA;AACxB,GAAA;EAEAiI,gBAAgB,CACdjI,IAAc,EACdgI,MAAgB,GAAG,IAAI,CAACjB,KAAK,CAACmB,aAAa,EACrC;AACN,IAAA,KAAK,CAACD,gBAAgB,CAACjI,IAAI,EAAEgI,MAAM,CAAC,CAAA;IACpCjI,gBAAgB,CAACC,IAAI,CAAC,CAAA;AACxB,GAAA;AACF,CAAC;;ACvjBI,MAAMmI,UAAU,CAAC;AACtBta,EAAAA,WAAW,CAAC+P,KAAa,EAAEwK,aAAuB,EAAE;AAAA,IAAA,IAAA,CAKpDxK,KAAK,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACLwK,aAAa,GAAA,KAAA,CAAA,CAAA;IALX,IAAI,CAACxK,KAAK,GAAGA,KAAK,CAAA;AAClB,IAAA,IAAI,CAACwK,aAAa,GAAG,CAAC,CAACA,aAAa,CAAA;AACtC,GAAA;AAIF,CAAA;AAEA,MAAMC,KAEL,GAAG;AACFC,EAAAA,KAAK,EAAE,IAAIH,UAAU,CAAC,GAAG,CAAC;AAC1BI,EAAAA,MAAM,EAAE,IAAIJ,UAAU,CAAC,MAAM,CAAC;AAC9BK,EAAAA,MAAM,EAAE,IAAIL,UAAU,CAAC,OAAO,CAAC;AAC/BM,EAAAA,MAAM,EAAE,IAAIN,UAAU,CAAC,gBAAgB,EAAE,IAAI,CAAA;AAC/C,CAAC,CAAA;AAEkC;EACjCE,KAAK,CAAC/I,QAAQ,GAAG,IAAI6I,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;AAC5C;;ACDA,MAAMO,UAAU,GAAG,IAAI,CAAA;AACvB,MAAMC,UAAU,GAAG,IAAI,CAAA;AACvB,MAAMC,MAAM,GAAG,IAAI,CAAA;AACnB,MAAMC,QAAQ,GAAG,IAAI,CAAA;AACrB,MAAM3W,MAAM,GAAG,IAAI,CAAA;AACnB,MAAM4W,OAAO,GAAG,IAAI,CAAA;AAoBb,MAAMC,iBAAiB,CAAC;AAiB7Blb,EAAAA,WAAW,CAACmb,KAAa,EAAEC,IAAkB,GAAG,EAAE,EAAE;AAAA,IAAA,IAAA,CAhBpDD,KAAK,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACLlO,OAAO,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACP4N,UAAU,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACVC,UAAU,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACVO,gBAAgB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAChBN,MAAM,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACNC,QAAQ,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACR3W,MAAM,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACN4W,OAAO,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACPK,KAAK,GAAA,KAAA,CAAA,CAAA;IAQH,IAAI,CAACH,KAAK,GAAGA,KAAK,CAAA;AAClB,IAAA,IAAI,CAAClO,OAAO,GAAGmO,IAAI,CAACnO,OAAO,CAAA;AAC3B,IAAA,IAAI,CAAC4N,UAAU,GAAG,CAAC,CAACO,IAAI,CAACP,UAAU,CAAA;AACnC,IAAA,IAAI,CAACC,UAAU,GAAG,CAAC,CAACM,IAAI,CAACN,UAAU,CAAA;AACnC,IAAA,IAAI,CAACO,gBAAgB,GAAG,CAAC,CAACD,IAAI,CAACC,gBAAgB,CAAA;AAC/C,IAAA,IAAI,CAACN,MAAM,GAAG,CAAC,CAACK,IAAI,CAACL,MAAM,CAAA;AAC3B,IAAA,IAAI,CAACC,QAAQ,GAAG,CAAC,CAACI,IAAI,CAACJ,QAAQ,CAAA;AAC/B,IAAA,IAAI,CAAC3W,MAAM,GAAG,CAAC,CAAC+W,IAAI,CAAC/W,MAAM,CAAA;AAC3B,IAAA,IAAI,CAAC4W,OAAO,GAAG,CAAC,CAACG,IAAI,CAACH,OAAO,CAAA;AAC7B,IAAA,IAAI,CAACK,KAAK,GAAGF,IAAI,CAACE,KAAK,IAAI,IAAI,GAAGF,IAAI,CAACE,KAAK,GAAG,IAAI,CAAA;AAChB,IAAA;MACjC,IAAI,CAACC,aAAa,GAAG,IAAI,CAAA;AAC3B,KAAA;AACF,GAAA;AACF,CAAA;AAGO,MAAMC,UAAQ,GAAG,IAAIC,GAAG,EAAqB,CAAA;AAEpD,SAASC,aAAa,CAACxR,IAAY,EAAEsI,OAAqB,GAAG,EAAE,EAAa;EAC1EA,OAAO,CAACvF,OAAO,GAAG/C,IAAI,CAAA;AACtB,EAAA,MAAM6F,KAAK,GAAG4L,WAAW,CAACzR,IAAI,EAAEsI,OAAO,CAAC,CAAA;AACxCgJ,EAAAA,UAAQ,CAACla,GAAG,CAAC4I,IAAI,EAAE6F,KAAK,CAAC,CAAA;AACzB,EAAA,OAAOA,KAAK,CAAA;AACd,CAAA;AAEA,SAAS6L,WAAW,CAAC1R,IAAY,EAAEoR,KAAa,EAAE;EAChD,OAAOK,WAAW,CAACzR,IAAI,EAAE;IAAE2Q,UAAU;AAAES,IAAAA,KAAAA;AAAM,GAAC,CAAC,CAAA;AACjD,CAAA;AAEA,IAAIO,gBAAgB,GAAG,CAAC,CAAC,CAAA;AAClB,MAAMC,UAA+B,GAAG,EAAE,CAAA;AACjD,MAAMC,WAAqB,GAAG,EAAE,CAAA;AAChC,MAAMC,WAAqB,GAAG,EAAE,CAAA;AAChC,MAAMC,gBAA2B,GAAG,EAAE,CAAA;AACtC,MAAMC,gBAA2B,GAAG,EAAE,CAAA;AACtC,MAAMC,aAAwB,GAAG,EAAE,CAAA;AAEnC,SAASR,WAAW,CAACzR,IAAY,EAAEsI,OAAqB,GAAG,EAAE,EAAa;AAAA,EAAA,IAAA,cAAA,EAAA,mBAAA,EAAA,mBAAA,EAAA,eAAA,CAAA;AACxE,EAAA,EAAEqJ,gBAAgB,CAAA;AAClBE,EAAAA,WAAW,CAAClG,IAAI,CAAC3L,IAAI,CAAC,CAAA;EACtB8R,WAAW,CAACnG,IAAI,CAACrD,CAAAA,cAAAA,GAAAA,OAAO,CAAC8I,KAAK,KAAA,IAAA,GAAA,cAAA,GAAI,CAAC,CAAC,CAAC,CAAA;EACrCW,gBAAgB,CAACpG,IAAI,CAACrD,CAAAA,mBAAAA,GAAAA,OAAO,CAACqI,UAAU,KAAA,IAAA,GAAA,mBAAA,GAAI,KAAK,CAAC,CAAA;EAClDqB,gBAAgB,CAACrG,IAAI,CAACrD,CAAAA,mBAAAA,GAAAA,OAAO,CAACsI,UAAU,KAAA,IAAA,GAAA,mBAAA,GAAI,KAAK,CAAC,CAAA;EAClDqB,aAAa,CAACtG,IAAI,CAACrD,CAAAA,eAAAA,GAAAA,OAAO,CAACnO,MAAM,KAAA,IAAA,GAAA,eAAA,GAAI,KAAK,CAAC,CAAA;EAC3CyX,UAAU,CAACjG,IAAI,CAAC,IAAIqF,iBAAiB,CAAChR,IAAI,EAAEsI,OAAO,CAAC,CAAC,CAAA;AAErD,EAAA,OAAOqJ,gBAAgB,CAAA;AACzB,CAAA;AAEA,SAASO,iBAAiB,CACxBlS,IAAY,EACZsI,OAAqB,GAAG,EAAE,EACf;AAAA,EAAA,IAAA,eAAA,EAAA,oBAAA,EAAA,oBAAA,EAAA,gBAAA,CAAA;AACX,EAAA,EAAEqJ,gBAAgB,CAAA;AAClBL,EAAAA,UAAQ,CAACla,GAAG,CAAC4I,IAAI,EAAE2R,gBAAgB,CAAC,CAAA;AACpCE,EAAAA,WAAW,CAAClG,IAAI,CAAC3L,IAAI,CAAC,CAAA;EACtB8R,WAAW,CAACnG,IAAI,CAACrD,CAAAA,eAAAA,GAAAA,OAAO,CAAC8I,KAAK,KAAA,IAAA,GAAA,eAAA,GAAI,CAAC,CAAC,CAAC,CAAA;EACrCW,gBAAgB,CAACpG,IAAI,CAACrD,CAAAA,oBAAAA,GAAAA,OAAO,CAACqI,UAAU,KAAA,IAAA,GAAA,oBAAA,GAAI,KAAK,CAAC,CAAA;EAClDqB,gBAAgB,CAACrG,IAAI,CAACrD,CAAAA,oBAAAA,GAAAA,OAAO,CAACsI,UAAU,KAAA,IAAA,GAAA,oBAAA,GAAI,KAAK,CAAC,CAAA;EAClDqB,aAAa,CAACtG,IAAI,CAACrD,CAAAA,gBAAAA,GAAAA,OAAO,CAACnO,MAAM,KAAA,IAAA,GAAA,gBAAA,GAAI,KAAK,CAAC,CAAA;EAE3CyX,UAAU,CAACjG,IAAI,CAAC,IAAIqF,iBAAiB,CAAC,MAAM,EAAE1I,OAAO,CAAC,CAAC,CAAA;AAEvD,EAAA,OAAOqJ,gBAAgB,CAAA;AACzB,CAAA;AAOO,MAAMQ,EAAE,GAAG;AAEhBC,EAAAA,QAAQ,EAAEX,WAAW,CAAC,GAAG,EAAE;IAAEd,UAAU;AAAEC,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACtDyB,EAAAA,YAAY,EAAEZ,WAAW,CAAC,IAAI,EAAE;IAAEd,UAAU;AAAEC,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC3D0B,EAAAA,WAAW,EAAEb,WAAW,CAAC,IAAI,EAAE;IAAEd,UAAU;AAAEC,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC1D2B,EAAAA,QAAQ,EAAEd,WAAW,CAAC,GAAG,CAAC;AAC1Be,EAAAA,WAAW,EAAEf,WAAW,CAAC,IAAI,CAAC;AAC9BgB,EAAAA,MAAM,EAAEhB,WAAW,CAAC,GAAG,EAAE;IAAEd,UAAU;AAAEC,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACpD8B,EAAAA,SAAS,EAAEjB,WAAW,CAAC,IAAI,EAAE;IAAEd,UAAU;AAAEC,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACxD+B,EAAAA,UAAU,EAAElB,WAAW,CAAC,IAAI,EAAE;IAAEd,UAAU;AAAEC,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACzDgC,EAAAA,MAAM,EAAEnB,WAAW,CAAC,GAAG,CAAC;AACxBoB,EAAAA,SAAS,EAAEpB,WAAW,CAAC,IAAI,CAAC;AAC5BqB,EAAAA,MAAM,EAAErB,WAAW,CAAC,GAAG,EAAE;IAAEd,UAAU;AAAEC,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACpDmC,EAAAA,MAAM,EAAEtB,WAAW,CAAC,GAAG,CAAC;AACxBuB,EAAAA,KAAK,EAAEvB,WAAW,CAAC,GAAG,EAAE;AAAEd,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACvCsC,EAAAA,IAAI,EAAExB,WAAW,CAAC,GAAG,EAAE;AAAEd,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACtCuC,EAAAA,KAAK,EAAEzB,WAAW,CAAC,GAAG,EAAE;AAAEd,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACvCwC,EAAAA,WAAW,EAAE1B,WAAW,CAAC,IAAI,EAAE;AAAEd,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC9CyC,EAAAA,GAAG,EAAE3B,WAAW,CAAC,GAAG,CAAC;AACrB4B,EAAAA,QAAQ,EAAE5B,WAAW,CAAC,GAAG,EAAE;AAAEd,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC1C2C,EAAAA,WAAW,EAAE7B,WAAW,CAAC,IAAI,CAAC;AAC9B8B,EAAAA,KAAK,EAAE9B,WAAW,CAAC,IAAI,EAAE;AAAEd,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACxCpJ,EAAAA,QAAQ,EAAEkK,WAAW,CAAC,UAAU,CAAC;AACjC+B,EAAAA,QAAQ,EAAE/B,WAAW,CAAC,KAAK,EAAE;AAAEd,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC5C8C,EAAAA,SAAS,EAAEhC,WAAW,CAAC,GAAG,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC3C8C,EAAAA,YAAY,EAAEjC,WAAW,CAAC,IAAI,EAAE;IAAEd,UAAU;AAAEC,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAE3D+C,EAAAA,YAAY,EAAElC,WAAW,CAAC,MAAM,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACjDgD,EAAAA,eAAe,EAAEnC,WAAW,CAAC,OAAO,EAAE;IAAEd,UAAU;AAAEC,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAEjEzC,EAAAA,EAAE,EAAEsD,WAAW,CAAC,GAAG,CAAC;AACpBoC,EAAAA,IAAI,EAAEpC,WAAW,CAAC,GAAG,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAGtCkD,EAAAA,oBAAoB,EAAErC,WAAW,CAAC,OAAO,CAAC;AAiB1CsC,EAAAA,EAAE,EAAEtC,WAAW,CAAC,GAAG,EAAE;IAAEd,UAAU;AAAEG,IAAAA,QAAAA;AAAS,GAAC,CAAC;AAC9C1Y,EAAAA,MAAM,EAAEqZ,WAAW,CAAC,IAAI,EAAE;IAAEd,UAAU;AAAEG,IAAAA,QAAAA;AAAS,GAAC,CAAC;AACnDkD,EAAAA,WAAW,EAAEvC,WAAW,CAAC,IAAI,EAAE;IAAEd,UAAU;AAAEG,IAAAA,QAAAA;AAAS,GAAC,CAAC;AAIxDmD,EAAAA,SAAS,EAAExC,WAAW,CAAC,IAAI,EAAE;IAAEd,UAAU;AAAEG,IAAAA,QAAAA;AAAS,GAAC,CAAC;AACtDoD,EAAAA,YAAY,EAAEzC,WAAW,CAAC,IAAI,EAAE;IAAEd,UAAU;AAAEG,IAAAA,QAAAA;AAAS,GAAC,CAAC;AAGzDqD,EAAAA,MAAM,EAAE1C,WAAW,CAAC,OAAO,EAAE;IAAEtX,MAAM;IAAE4W,OAAO;AAAEH,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC7DwD,EAAAA,IAAI,EAAE3C,WAAW,CAAC,GAAG,EAAE;IAAEd,UAAU;IAAExW,MAAM;AAAEyW,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC1DyD,EAAAA,KAAK,EAAE5C,WAAW,CAAC,GAAG,EAAE;IAAEd,UAAU;IAAExW,MAAM;AAAEyW,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAI3D0D,EAAAA,WAAW,EAAE7C,WAAW,CAAC,IAAI,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC9C2D,EAAAA,QAAQ,EAAE9C,WAAW,CAAC,IAAI,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAG3C4D,EAAAA,QAAQ,EAAE9C,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;AAC9B+C,EAAAA,iBAAiB,EAAE/C,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;AACvCgD,EAAAA,SAAS,EAAEhD,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;AAC/BiD,EAAAA,UAAU,EAAEjD,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;AAChCkD,EAAAA,SAAS,EAAElD,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;AAC9BmD,EAAAA,UAAU,EAAEnD,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;AAC/BoD,EAAAA,UAAU,EAAEpD,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;AAC/BqD,EAAAA,QAAQ,EAAErD,WAAW,CAAC,eAAe,EAAE,CAAC,CAAC;AACzCsD,EAAAA,EAAE,EAAEtD,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC;AAC/BuD,EAAAA,EAAE,EAAEvD,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC;AAC/BwD,EAAAA,UAAU,EAAExD,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC;AACvCyD,EAAAA,QAAQ,EAAEzD,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC;AACrC0D,EAAAA,SAAS,EAAE1D,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC;AACtC2D,EAAAA,SAAS,EAAE3D,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC;AACtC4D,EAAAA,OAAO,EAAE7D,WAAW,CAAC,KAAK,EAAE;IAAEd,UAAU;AAAES,IAAAA,KAAK,EAAE,CAAC;IAAEjX,MAAM;AAAEyW,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAEzE2E,EAAAA,MAAM,EAAE9D,WAAW,CAAC,GAAG,EAAE;AAAEL,IAAAA,KAAK,EAAE,EAAE;AAAER,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAEnD4E,EAAAA,IAAI,EAAE/D,WAAW,CAAC,GAAG,EAAE;AAAEL,IAAAA,KAAK,EAAE,EAAA;AAAG,GAAC,CAAC;AACrCqE,EAAAA,KAAK,EAAE/D,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC;AAC3BgE,EAAAA,QAAQ,EAAEjE,WAAW,CAAC,IAAI,EAAE;IAC1Bd,UAAU;AACVS,IAAAA,KAAK,EAAE,EAAE;AACTD,IAAAA,gBAAgB,EAAE,IAAA;AACpB,GAAC,CAAC;AAOFwE,EAAAA,GAAG,EAAEnE,aAAa,CAAC,IAAI,EAAE;IAAEb,UAAU;AAAES,IAAAA,KAAK,EAAE,CAAA;AAAE,GAAC,CAAC;AAClDwE,EAAAA,WAAW,EAAEpE,aAAa,CAAC,YAAY,EAAE;IAAEb,UAAU;AAAES,IAAAA,KAAK,EAAE,CAAA;AAAE,GAAC,CAAC;AAElEyE,EAAAA,MAAM,EAAErE,aAAa,CAAC,OAAO,CAAC;AAC9BsE,EAAAA,KAAK,EAAEtE,aAAa,CAAC,MAAM,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC5CoF,EAAAA,MAAM,EAAEvE,aAAa,CAAC,OAAO,CAAC;AAC9BwE,EAAAA,SAAS,EAAExE,aAAa,CAAC,UAAU,CAAC;AACpCyE,EAAAA,SAAS,EAAEzE,aAAa,CAAC,UAAU,CAAC;AACpC0E,EAAAA,QAAQ,EAAE1E,aAAa,CAAC,SAAS,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAClDwF,EAAAA,KAAK,EAAE3E,aAAa,CAAC,MAAM,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC5CyF,EAAAA,QAAQ,EAAE5E,aAAa,CAAC,SAAS,CAAC;AAClC6E,EAAAA,SAAS,EAAE7E,aAAa,CAAC,UAAU,EAAE;AAAEZ,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACpD0F,EAAAA,GAAG,EAAE9E,aAAa,CAAC,IAAI,CAAC;AACxB+E,EAAAA,OAAO,EAAE/E,aAAa,CAAC,QAAQ,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAChD6F,EAAAA,OAAO,EAAEhF,aAAa,CAAC,QAAQ,CAAC;AAChCiF,EAAAA,MAAM,EAAEjF,aAAa,CAAC,OAAO,EAAE;IAAEb,UAAU;IAAExW,MAAM;AAAEyW,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAClE8F,EAAAA,IAAI,EAAElF,aAAa,CAAC,KAAK,CAAC;AAC1BmF,EAAAA,IAAI,EAAEnF,aAAa,CAAC,KAAK,CAAC;AAC1BoF,EAAAA,MAAM,EAAEpF,aAAa,CAAC,OAAO,CAAC;AAC9BqF,EAAAA,KAAK,EAAErF,aAAa,CAAC,MAAM,CAAC;AAC5BsF,EAAAA,IAAI,EAAEtF,aAAa,CAAC,KAAK,EAAE;IAAEb,UAAU;AAAEC,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACtDmG,EAAAA,KAAK,EAAEvF,aAAa,CAAC,MAAM,EAAE;AAAEZ,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC5CoG,EAAAA,MAAM,EAAExF,aAAa,CAAC,OAAO,EAAE;AAAEZ,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC9CqG,EAAAA,MAAM,EAAEzF,aAAa,CAAC,OAAO,EAAE;AAAEZ,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC9CsG,EAAAA,QAAQ,EAAE1F,aAAa,CAAC,SAAS,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAClDwG,EAAAA,OAAO,EAAE3F,aAAa,CAAC,QAAQ,CAAC;AAChC4F,EAAAA,OAAO,EAAE5F,aAAa,CAAC,QAAQ,EAAE;AAAEZ,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAChDyG,EAAAA,KAAK,EAAE7F,aAAa,CAAC,MAAM,EAAE;AAAEZ,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC5C0G,EAAAA,KAAK,EAAE9F,aAAa,CAAC,MAAM,EAAE;AAAEZ,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC5C2G,EAAAA,MAAM,EAAE/F,aAAa,CAAC,OAAO,EAAE;AAAEZ,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC9C4G,EAAAA,OAAO,EAAEhG,aAAa,CAAC,QAAQ,EAAE;IAAEb,UAAU;IAAExW,MAAM;AAAEyW,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACpE6G,EAAAA,KAAK,EAAEjG,aAAa,CAAC,MAAM,EAAE;IAAEb,UAAU;IAAExW,MAAM;AAAEyW,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAChE8G,EAAAA,OAAO,EAAElG,aAAa,CAAC,QAAQ,EAAE;IAAEb,UAAU;IAAExW,MAAM;AAAEyW,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAEpE+G,EAAAA,GAAG,EAAEnG,aAAa,CAAC,IAAI,EAAE;IAAEX,MAAM;AAAEF,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAChDiH,EAAAA,IAAI,EAAEpG,aAAa,CAAC,KAAK,EAAE;AAAEX,IAAAA,MAAAA;AAAO,GAAC,CAAC;AACtCgH,EAAAA,MAAM,EAAErG,aAAa,CAAC,OAAO,EAAE;AAAEX,IAAAA,MAAAA;AAAO,GAAC,CAAC;AAM1CiH,EAAAA,GAAG,EAAE5F,iBAAiB,CAAC,IAAI,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC5CmH,EAAAA,OAAO,EAAE7F,iBAAiB,CAAC,QAAQ,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACpDoH,EAAAA,MAAM,EAAE9F,iBAAiB,CAAC,OAAO,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAClDqH,EAAAA,MAAM,EAAE/F,iBAAiB,CAAC,OAAO,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAClDsH,EAAAA,KAAK,EAAEhG,iBAAiB,CAAC,MAAM,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAChDuH,EAAAA,IAAI,EAAEjG,iBAAiB,CAAC,KAAK,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC9CwH,EAAAA,IAAI,EAAElG,iBAAiB,CAAC,KAAK,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC9CyH,EAAAA,KAAK,EAAEnG,iBAAiB,CAAC,MAAM,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAChD0H,EAAAA,GAAG,EAAEpG,iBAAiB,CAAC,IAAI,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC5C2H,EAAAA,KAAK,EAAErG,iBAAiB,CAAC,MAAM,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAChD4H,EAAAA,IAAI,EAAEtG,iBAAiB,CAAC,KAAK,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC9C6H,EAAAA,OAAO,EAAEvG,iBAAiB,CAAC,QAAQ,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACpD8H,EAAAA,MAAM,EAAExG,iBAAiB,CAAC,OAAO,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAClD+H,EAAAA,MAAM,EAAEzG,iBAAiB,CAAC,OAAO,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAGlDgI,EAAAA,QAAQ,EAAE1G,iBAAiB,CAAC,SAAS,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACtDiI,EAAAA,OAAO,EAAE3G,iBAAiB,CAAC,QAAQ,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACpDkI,EAAAA,QAAQ,EAAE5G,iBAAiB,CAAC,SAAS,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACtDmI,EAAAA,OAAO,EAAE7G,iBAAiB,CAAC,QAAQ,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACpDoI,EAAAA,WAAW,EAAE9G,iBAAiB,CAAC,YAAY,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC5DqI,EAAAA,UAAU,EAAE/G,iBAAiB,CAAC,WAAW,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC1DsI,EAAAA,MAAM,EAAEhH,iBAAiB,CAAC,OAAO,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAClDuI,EAAAA,GAAG,EAAEjH,iBAAiB,CAAC,IAAI,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC5CwI,EAAAA,OAAO,EAAElH,iBAAiB,CAAC,QAAQ,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACpDyI,EAAAA,MAAM,EAAEnH,iBAAiB,CAAC,OAAO,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAClD0I,EAAAA,QAAQ,EAAEpH,iBAAiB,CAAC,SAAS,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACtD2I,EAAAA,UAAU,EAAErH,iBAAiB,CAAC,WAAW,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAE1D4I,EAAAA,MAAM,EAAEtH,iBAAiB,CAAC,OAAO,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAClD6I,EAAAA,SAAS,EAAEvH,iBAAiB,CAAC,UAAU,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACxD8I,EAAAA,OAAO,EAAExH,iBAAiB,CAAC,QAAQ,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAGpD+I,EAAAA,SAAS,EAAEzH,iBAAiB,CAAC,UAAU,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACxDgJ,EAAAA,QAAQ,EAAE1H,iBAAiB,CAAC,SAAS,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACtDiJ,EAAAA,KAAK,EAAE3H,iBAAiB,CAAC,MAAM,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAChDkJ,EAAAA,OAAO,EAAE5H,iBAAiB,CAAC,QAAQ,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACpDmJ,EAAAA,UAAU,EAAE7H,iBAAiB,CAAC,WAAW,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAE1DoJ,EAAAA,UAAU,EAAE9H,iBAAiB,CAAC,WAAW,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC1DqJ,EAAAA,KAAK,EAAE/H,iBAAiB,CAAC,MAAM,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAEhDsJ,EAAAA,OAAO,EAAEhI,iBAAiB,CAAC,QAAQ,EAAE;AAAEtB,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAEpD5Q,EAAAA,IAAI,EAAEyR,WAAW,CAAC,MAAM,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAGzCuJ,EAAAA,MAAM,EAAE1I,WAAW,CAAC,QAAQ,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC7CwJ,EAAAA,GAAG,EAAE3I,WAAW,CAAC,KAAK,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACvC1H,EAAAA,MAAM,EAAEuI,WAAW,CAAC,QAAQ,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC7CxH,EAAAA,OAAO,EAAEqI,WAAW,CAAC,SAAS,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAE/CyJ,EAAAA,MAAM,EAAE5I,WAAW,CAAC,QAAQ,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AAC7C0J,EAAAA,WAAW,EAAE7I,WAAW,CAAC,OAAO,EAAE;AAAEb,IAAAA,UAAAA;AAAW,GAAC,CAAC;AACjD2J,EAAAA,GAAG,EAAE9I,WAAW,CAAC,KAAK,CAAC;AAGvB+I,EAAAA,OAAO,EAAE/I,WAAW,CAAC,SAAS,CAAC;AAC/BgJ,EAAAA,OAAO,EAAEhJ,WAAW,CAAC,SAAS,EAAE;AAAEd,IAAAA,UAAU,EAAE,IAAA;AAAK,GAAC,CAAC;AACrD+J,EAAAA,WAAW,EAAEjJ,WAAW,CAAC,aAAa,EAAE;AAAEb,IAAAA,UAAU,EAAE,IAAA;AAAK,GAAC,CAAC;AAC7D+J,EAAAA,SAAS,EAAElJ,WAAW,CAAC,WAAW,CAAC;AAGnCmJ,EAAAA,WAAW,EAAEnJ,WAAW,CAAC,IAAI,EAAE;AAAEb,IAAAA,UAAU,EAAE,IAAA;GAAM,CAAA;AACrD,CAAU,CAAA;AAEH,SAASiK,iBAAiB,CAAChV,KAAgB,EAAW;AAC3D,EAAA,OAAOA,KAAK,IAAA,EAAU,IAAIA,KAAK,IAAW,GAAA,CAAA;AAC5C,CAAA;AAEO,SAASiV,iCAAiC,CAACjV,KAAgB,EAAW;AAG3E,EAAA,OAAOA,KAAK,IAAa,EAAA,CAAA;AAC3B,CAAA;AAEO,SAASkV,0BAA0B,CAAClV,KAAgB,EAAW;AACpE,EAAA,OAAOA,KAAK,IAAA,EAAU,IAAIA,KAAK,IAAW,GAAA,CAAA;AAC5C,CAAA;AAEO,SAASmV,0BAA0B,CAACnV,KAAgB,EAAW;AACpE,EAAA,OAAOA,KAAK,IAAA,EAAU,IAAIA,KAAK,IAAc,GAAA,CAAA;AAC/C,CAAA;AAEO,SAASoV,0BAA0B,CAACpV,KAAgB,EAAW;EACpE,OAAOkM,gBAAgB,CAAClM,KAAK,CAAC,CAAA;AAChC,CAAA;AAEO,SAASqV,uBAAuB,CAACrV,KAAgB,EAAW;EACjE,OAAOmM,gBAAgB,CAACnM,KAAK,CAAC,CAAA;AAChC,CAAA;AAEO,SAASsV,iBAAiB,CAACtV,KAAgB,EAAW;AAC3D,EAAA,OAAOA,KAAK,IAAA,EAAS,IAAIA,KAAK,IAAmB,EAAA,CAAA;AACnD,CAAA;AAEO,SAASuV,kCAAkC,CAACvV,KAAgB,EAAW;AAC5E,EAAA,OAAOA,KAAK,IAAA,GAAiB,IAAIA,KAAK,IAAc,GAAA,CAAA;AACtD,CAAA;AAEO,SAASwV,WAAW,CAACxV,KAAgB,EAAW;AACrD,EAAA,OAAOA,KAAK,IAAA,EAAU,IAAIA,KAAK,IAAa,EAAA,CAAA;AAC9C,CAAA;AAEO,SAASyV,cAAc,CAACzV,KAAgB,EAAW;AACxD,EAAA,OAAOA,KAAK,IAAA,EAAU,IAAIA,KAAK,IAAa,EAAA,CAAA;AAC9C,CAAA;AAEO,SAAS0V,eAAe,CAAC1V,KAAgB,EAAW;AACzD,EAAA,OAAOA,KAAK,IAAA,EAAe,IAAIA,KAAK,IAAkB,EAAA,CAAA;AACxD,CAAA;AAEO,SAAS2V,cAAc,CAAC3V,KAAgB,EAAW;AACxD,EAAA,OAAOA,KAAK,KAAc,EAAA,CAAA;AAC5B,CAAA;AAEO,SAAS4V,aAAa,CAAC5V,KAAgB,EAAW;EACvD,OAAOoM,aAAa,CAACpM,KAAK,CAAC,CAAA;AAC7B,CAAA;AAEO,SAAS6V,qBAAqB,CAAC7V,KAAgB,EAAW;AAC/D,EAAA,OAAOA,KAAK,IAAA,GAAa,IAAIA,KAAK,IAAc,GAAA,CAAA;AAClD,CAAA;AAEO,SAAS8V,yBAAyB,CAAC9V,KAAgB,EAAW;AACnE,EAAA,OAAOA,KAAK,IAAA,GAAgB,IAAIA,KAAK,IAAY,GAAA,CAAA;AACnD,CAAA;AAEO,SAAS+V,cAAc,CAAC/V,KAAgB,EAAU;EACvD,OAAOgM,WAAW,CAAChM,KAAK,CAAC,CAAA;AAC3B,CAAA;AAEO,SAASgW,uBAAuB,CAAChW,KAAgB,EAAU;EAChE,OAAOiM,WAAW,CAACjM,KAAK,CAAC,CAAA;AAC3B,CAAA;AAMO,SAASiW,uBAAuB,CAACjW,KAAgB,EAAW;AACjE,EAAA,OAAOA,KAAK,KAAgB,EAAA,CAAA;AAC9B,CAAA;AAEO,SAASkW,eAAe,CAAClW,KAAgB,EAAW;AACzD,EAAA,OAAOA,KAAK,IAAA,EAAmB,IAAIA,KAAK,IAAsB,EAAA,CAAA;AAChE,CAAA;AAEO,SAASmW,gBAAgB,CAACnW,KAAgB,EAAqB;EACpE,OAAO+L,UAAU,CAAC/L,KAAK,CAAC,CAAA;AAC1B,CAAA;AAMmC;AACjC+L,EAAAA,UAAU,CAAW,CAAA,CAAA,CAACP,aAAa,GAAG4K,OAAO,IAAI;IAC/CA,OAAO,CAACC,GAAG,EAAE,CAAA;GACd,CAAA;AAEDtK,EAAAA,UAAU,CAAW,CAAA,CAAA,CAACP,aAAa,GACjCO,UAAU,CAAe,CAAA,CAAA,CAACP,aAAa,GACvCO,UAAU,CAAiB,EAAA,CAAA,CAACP,aAAa,GACvC4K,OAAO,IAAI;AACTA,IAAAA,OAAO,CAACtQ,IAAI,CAACwQ,KAAE,CAAC5L,KAAK,CAAC,CAAA;GACvB,CAAA;AAELqB,EAAAA,UAAU,CAAc,EAAA,CAAA,CAACP,aAAa,GAAG4K,OAAO,IAAI;AAClD,IAAA,IAAIA,OAAO,CAACA,OAAO,CAACllB,MAAM,GAAG,CAAC,CAAC,KAAKolB,KAAE,CAAC5U,QAAQ,EAAE;MAC/C0U,OAAO,CAACC,GAAG,EAAE,CAAA;AACf,KAAC,MAAM;AACLD,MAAAA,OAAO,CAACtQ,IAAI,CAACwQ,KAAE,CAAC5U,QAAQ,CAAC,CAAA;AAC3B,KAAA;GACD,CAAA;AAEDqK,EAAAA,UAAU,CAAgB,GAAA,CAAA,CAACP,aAAa,GAAG4K,OAAO,IAAI;IACpDA,OAAO,CAACtQ,IAAI,CAACwQ,KAAE,CAACzL,MAAM,EAAEyL,KAAE,CAAC3L,MAAM,CAAC,CAAA;GACnC,CAAA;AACH;;ACncA,IAAI4L,4BAA4B,GAAG,8qIAA8qI,CAAA;AAEjtI,IAAIC,uBAAuB,GAAG,mkFAAmkF,CAAA;AAEjmF,MAAMC,uBAAuB,GAAG,IAAI1T,MAAM,CACxC,GAAG,GAAGwT,4BAA4B,GAAG,GAAG,CACzC,CAAA;AACD,MAAMG,kBAAkB,GAAG,IAAI3T,MAAM,CACnC,GAAG,GAAGwT,4BAA4B,GAAGC,uBAAuB,GAAG,GAAG,CACnE,CAAA;AAEDD,4BAA4B,GAAGC,uBAAuB,GAAG,IAAI,CAAA;AAQ7D,MAAMG,0BAA0B,GAAG,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC,CAAA;AAEj+C,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,KAAK,EAAC,CAAC,EA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"}