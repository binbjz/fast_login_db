{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"label\", null, \"用户名:\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", null, \"密码:\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"form\", null, [_hoisted_1, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.username = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.username]]), _hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]]), _createElementVNode(\"button\", {\n    type: \"submit\",\n    onClick: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.registerUser && $options.registerUser(...args), [\"prevent\"]))\n  }, \"注册\"), _createElementVNode(\"button\", {\n    type: \"submit\",\n    onClick: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.loginUser && $options.loginUser(...args), [\"prevent\"]))\n  }, \"登录\")])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","type","$data","username","$event","_hoisted_2","password","onClick","_cache","_withModifiers","args","$options","registerUser","loginUser"],"sources":["/Users/zhaobin/Documents/WorkspaceP/fast_login_db/login_reg_frontend/src/App.vue"],"sourcesContent":["<!--Axios是一个基于Promise的HTTP客户端,用于在浏览器和Node.js中发送HTTP请求。\n在Vue中使用Axios,可以很方便地与后端API进行交互,发送HTTP请求并获取响应数据。\n\nAxios的应用场景包括但不限于：\n获取和发送数据：通过Axios发送HTTP请求,获取和发送数据可以实现无刷新的、异步更新页面数据；\n处理HTTP请求错误：Axios可以对HTTP请求状态码进行处理并返回错误信息,方便在开发时进行调试和错误处理；\n处理请求和响应拦截器：Axios中可以设置请求和响应拦截器,对请求和响应进行统一处理,例如添加请求头、对响应\n数据进行格式化等操作；\n实现全局配置：Axios中可以实现全局的配置,例如设置默认请求头、设置超时时间、设置跨域请求等。\n总的来说,Axios在前端开发中扮演了很重要的角色,可以帮助我们方便地与后端API进行通信,实现前后端的数据交互\n和业务逻辑实现。-->\n\n<template>\n  <div>\n    <form>\n      <label>用户名:</label>\n      <input type=\"text\" v-model=\"username\">\n\n      <label>密码:</label>\n      <input type=\"password\" v-model=\"password\">\n\n      <button type=\"submit\" @click.prevent=\"registerUser\">注册</button>\n\n      <button type=\"submit\" @click.prevent=\"loginUser\">登录</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n    };\n  },\n  methods: {\n    // async registerUser() {\n    //   try {\n    //     const response = await axios.post(\"http://localhost:8000/register\", {\n    //       username: this.username,\n    //       password: this.password,\n    //     });\n    //     console.log(response);\n    //   } catch (error) {\n    //     console.log(error.response.data.detail);\n    //   }\n    // },\n    //\n    // async loginUser() {\n    //   try {\n    //     const response = await axios.post(\"http://localhost:8000/login\", {\n    //       username: this.username,\n    //       password: this.password,\n    //     });\n    //     console.log(response);\n    //   } catch (error) {\n    //     console.log(error.response.data.detail);\n    //   }\n    // },\n    async registerUser() {\n      try {\n        const response = await axios.post(\"http://localhost:8000/register\", {\n          username: this.username,\n          password: this.password,\n        });\n        console.log(response);\n      } catch (error) {\n        try {\n          console.log(error.response.data.detail);\n        } catch (e) {\n          console.log(\"An error occurred:\", e.message);\n        }\n      }\n    },\n\n    async loginUser() {\n      try {\n        const response = await axios.post(\"http://localhost:8000/login\", {\n          username: this.username,\n          password: this.password,\n        });\n        console.log(response);\n      } catch (error) {\n        try {\n          console.log(error.response.data.detail);\n        } catch (e) {\n          console.log(\"An error occurred:\", e.message);\n        }\n      }\n    },\n\n  },\n};\n</script>\n"],"mappings":";gCAeMA,mBAAA,CAAmB,eAAZ,MAAI;gCAGXA,mBAAA,CAAkB,eAAX,KAAG;;;uBALdC,mBAAA,CAYM,cAXJD,mBAAA,CAUO,eATLE,UAAmB,E,gBACnBF,mBAAA,CAAsC;IAA/BG,IAAI,EAAC,MAAM;+DAAUC,KAAA,CAAAC,QAAQ,GAAAC,MAAA;iDAARF,KAAA,CAAAC,QAAQ,E,GAEpCE,UAAkB,E,gBAClBP,mBAAA,CAA0C;IAAnCG,IAAI,EAAC,UAAU;+DAAUC,KAAA,CAAAI,QAAQ,GAAAF,MAAA;iDAARF,KAAA,CAAAI,QAAQ,E,GAExCR,mBAAA,CAA+D;IAAvDG,IAAI,EAAC,QAAQ;IAAEM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;KAAE,IAAE,GAEtDZ,mBAAA,CAA4D;IAApDG,IAAI,EAAC,QAAQ;IAAEM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,QAAA,CAAAE,SAAA,IAAAF,QAAA,CAAAE,SAAA,IAAAH,IAAA,CAAS;KAAE,IAAE,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}